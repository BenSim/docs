(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{674:function(e,t,n){"use strict";n.r(t);var o=n(0),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"cw20-bonding-curve"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cw20-bonding-curve"}},[e._v("#")]),e._v(" CW20 Bonding curve")]),e._v(" "),n("p",[e._v("cw20-bonding-curve source code: "),n("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-bonding",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-bonding"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("This builds on the "),n("RouterLink",{attrs:{to:"/cw-plus/cw20/01-spec.html"}},[e._v("Basic CW20 interface")]),e._v("\nas implemented in "),n("RouterLink",{attrs:{to:"/cw-plus/cw20/02-cw20-base-spec.html"}},[n("code",[e._v("cw20-base")])])],1),e._v(" "),n("p",[e._v("This serves three purposes:")]),e._v(" "),n("ul",[n("li",[e._v("A usable and extensible contract for arbitrary bonding curves")]),e._v(" "),n("li",[e._v("A demonstration of how to extend "),n("code",[e._v("cw20-base")]),e._v(" to add extra functionality")]),e._v(" "),n("li",[e._v("A demonstration of the "),n("RouterLink",{attrs:{to:"/cw-plus/cw20/01-spec.html#receiver"}},[e._v("Receiver interface")])],1)]),e._v(" "),n("h2",{attrs:{id:"design"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#design"}},[e._v("#")]),e._v(" Design")]),e._v(" "),n("p",[e._v("There are two variants - accepting native tokens and accepting cw20 tokens\nas the "),n("em",[e._v("reserve")]),e._v(" token (this is the token that is input to the bonding curve).")]),e._v(" "),n("p",[e._v("Minting: When the input is sent to the contract (either via "),n("code",[e._v("HandleMsg::Buy{}")]),e._v("\nwith native tokens, or via "),n("code",[e._v("HandleMsg::Receive{}")]),e._v(" with cw20 tokens),\nthose tokens remain on the contract and it issues it's own token to the\nsender's account (known as "),n("em",[e._v("supply")]),e._v(" token).")]),e._v(" "),n("p",[e._v("Burning: We override the burn function to not only burn the requested tokens,\nbut also release a proper number of the input tokens to the account that burnt\nthe custom token")]),e._v(" "),n("p",[e._v("Curves: "),n("code",[e._v("handle")]),e._v(" specifies a bonding function, which is sent to parameterize\n"),n("code",[e._v("handle_fn")]),e._v(" (which does all the work). The curve is set when compiling\nthe contract. In fact many contracts can just wrap "),n("code",[e._v("cw20-bonding")]),e._v(" and\nspecify the custom curve parameter.")]),e._v(" "),n("p",[e._v("Read more about "),n("a",{attrs:{href:"https://yos.io/2018/11/10/bonding-curves/",target:"_blank",rel:"noopener noreferrer"}},[e._v("bonding curve math here"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Note: the first version only accepts native tokens as the")]),e._v(" "),n("h3",{attrs:{id:"math"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[e._v("#")]),e._v(" Math")]),e._v(" "),n("p",[e._v("Given a price curve "),n("code",[e._v("f(x)")]),e._v(" = price of the "),n("code",[e._v("x")]),e._v("th token, we want to figure out\nhow to buy into and sell from the bonding curve. In fact we can look at\nthe total supply issued. let "),n("code",[e._v("F(x)")]),e._v(" be the integral of "),n("code",[e._v("f(x)")]),e._v(". We have issued\n"),n("code",[e._v("x")]),e._v(" tokens for "),n("code",[e._v("F(x)")]),e._v(" sent to the contract. Or, in reverse, if we send\n"),n("code",[e._v("x")]),e._v(" tokens to the contract, it will mint "),n("code",[e._v("F^-1(x)")]),e._v(" tokens.")]),e._v(" "),n("p",[e._v("From this we can create some formulas. Assume we currently have issued "),n("code",[e._v("S")]),e._v("\ntokens in exchange for "),n("code",[e._v("N = F(S)")]),e._v(" input tokens. If someone sends us "),n("code",[e._v("x")]),e._v(" tokens,\nhow much will we issue?")]),e._v(" "),n("p",[n("code",[e._v("F^-1(N+x) - F^-1(N)")]),e._v(" = "),n("code",[e._v("F^-1(N+x) - S")])]),e._v(" "),n("p",[e._v("And if we sell "),n("code",[e._v("x")]),e._v(" tokens, how much we will get out:")]),e._v(" "),n("p",[n("code",[e._v("F(S) - F(S-x)")]),e._v(" = "),n("code",[e._v("N - F(S-x)")])]),e._v(" "),n("p",[e._v("Just one calculation each side. To be safe, make sure to round down and\nalways check against "),n("code",[e._v("F(S)")]),e._v(" when using "),n("code",[e._v("F^-1(S)")]),e._v(" to estimate how much\nshould be issued. This will also safely give us how many tokens to return.")]),e._v(" "),n("p",[e._v("There is built in support for safely "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.i128.html#method.checked_pow",target:"_blank",rel:"noopener noreferrer"}},[e._v("raising i128 to an integer power"),n("OutboundLink")],1),e._v(".\nThere is also a crate to "),n("a",{attrs:{href:"https://docs.rs/num-integer/0.1.43/num_integer/trait.Roots.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("provide nth-root of for all integers"),n("OutboundLink")],1),e._v(".\nWith these two, we can handle most math except for logs/exponents.")]),e._v(" "),n("p",[e._v("Compare this to "),n("a",{attrs:{href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7b7ff729b82ea73ea168e495d9c94cb901ae95ce/contracts/math/Power.sol",target:"_blank",rel:"noopener noreferrer"}},[e._v("writing it all in solidity"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Examples:")]),e._v(" "),n("p",[e._v("Price Constant: "),n("code",[e._v("f(x) = k")]),e._v(" and "),n("code",[e._v("F(x) = kx")]),e._v(" and "),n("code",[e._v("F^-1(x) = x/k")])]),e._v(" "),n("p",[e._v("Price Linear: "),n("code",[e._v("f(x) = kx")]),e._v(" and "),n("code",[e._v("F(x) = kx^2/2")]),e._v(" and "),n("code",[e._v("F^-1(x) = (2x/k)^(0.5)")])]),e._v(" "),n("p",[e._v("Price Square Root: "),n("code",[e._v("f(x) = x^0.5")]),e._v(" and "),n("code",[e._v("F(x) = x^1.5/1.5")]),e._v(" and "),n("code",[e._v("F^-1(x) = (1.5*x)^(2/3)")])]),e._v(" "),n("p",[e._v("We will only implement these curves to start with, and leave it to others to import this with more complex curves,")])])}),[],!1,null,null,null);t.default=s.exports}}]);