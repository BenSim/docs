(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{694:function(e,o,t){"use strict";t.r(o);var a=t(0),n=Object(a.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_0-14-0-2021-05-03"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-14-0-2021-05-03"}},[e._v("#")]),e._v(" [0.14.0] - 2021-05-03")]),e._v(" "),t("h3",{attrs:{id:"added"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#added"}},[e._v("#")]),e._v(" Added")]),e._v(" "),t("ul",[t("li",[e._v("cosmwasm-crypto: Add "),t("code",[e._v("ed25519_batch_verify")]),e._v(", EdDSA ed25519 batch signature\nverification scheme for Tendermint signatures and public keys formats.\n([#788])")]),e._v(" "),t("li",[e._v("cosmwasm-crypto: Add "),t("code",[e._v("ed25519_verify")]),e._v(", EdDSA ed25519 signature verification\nscheme for Tendermint signature and public key formats. ([#771])")]),e._v(" "),t("li",[e._v("cosmwasm-crypto: New crypto-related crate. Add "),t("code",[e._v("secp256k1_verify")]),e._v(", ECDSA\nsecp256k1 signature verification scheme for Cosmos signature and public key\nformats. ([#780])")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Add PinnedMemoryCache. ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/696",target:"_blank",rel:"noopener noreferrer"}},[e._v("#696"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-vm: The new "),t("code",[e._v("Cache::analyze")]),e._v(" provides a static analyzis of the Wasm\nbytecode. This is used to tell the caller if the contract exposes IBC entry\npoints. ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/736",target:"_blank",rel:"noopener noreferrer"}},[e._v("#736"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Added new "),t("code",[e._v("stargate")]),e._v(" feature flag to enable new stargate and ibc\nfeatures ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/692",target:"_blank",rel:"noopener noreferrer"}},[e._v("#692"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/716",target:"_blank",rel:"noopener noreferrer"}},[e._v("#716"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-vm: (requires "),t("code",[e._v("stargate")]),e._v(") call into 6 new ibc entry points if exposed\nby contract ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/692",target:"_blank",rel:"noopener noreferrer"}},[e._v("#692"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/716",target:"_blank",rel:"noopener noreferrer"}},[e._v("#716"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Added new "),t("code",[e._v("stargate")]),e._v(" feature flag to enable new stargate and ibc\nfeatures ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/692",target:"_blank",rel:"noopener noreferrer"}},[e._v("#692"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/706",target:"_blank",rel:"noopener noreferrer"}},[e._v("#706"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: (requires "),t("code",[e._v("stargate")]),e._v(") Added new "),t("code",[e._v("CosmosMsg::Stargate")]),e._v(" message\ntype to dispatch protobuf-encoded message (contract must know proto schema)\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/706",target:"_blank",rel:"noopener noreferrer"}},[e._v("#706"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: (requires "),t("code",[e._v("stargate")]),e._v(") Added new "),t("code",[e._v("QueryRequest::Stargate")]),e._v(" message\ntype to dispatch protobuf-encoded queries (contract must know proto schema for\nrequest and response) ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/706",target:"_blank",rel:"noopener noreferrer"}},[e._v("#706"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: (requires "),t("code",[e._v("stargate")]),e._v(") Added new "),t("code",[e._v("CosmosMsg::Ibc(IbcMsg)")]),e._v(" message\ntype to use ibctransfer app or send raw ics packets (if contract has ibc entry\npoints) ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/692",target:"_blank",rel:"noopener noreferrer"}},[e._v("#692"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/710",target:"_blank",rel:"noopener noreferrer"}},[e._v("#710"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Add mutable helper methods to "),t("code",[e._v("InitResponse")]),e._v(", "),t("code",[e._v("MigrateResponse")]),e._v("\nand "),t("code",[e._v("HandleResponse")]),e._v(" which make "),t("code",[e._v("Context")]),e._v(" obsolete.")]),e._v(" "),t("li",[e._v("contracts: added new "),t("code",[e._v("ibc-reflect")]),e._v(" contract that receives channels and assigns\neach an account to redispatch. Similar idea to ICS27/Interchain Accounts (but\ndifferent implementation) ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/692",target:"_blank",rel:"noopener noreferrer"}},[e._v("#692"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/711",target:"_blank",rel:"noopener noreferrer"}},[e._v("#711"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/714",target:"_blank",rel:"noopener noreferrer"}},[e._v("#714"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Added new "),t("code",[e._v("WasmMsg::Migrate")]),e._v(" variant that allows one contract\n(eg. multisig) be the admin and migrate another contract ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/768",target:"_blank",rel:"noopener noreferrer"}},[e._v("#768"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Added optional "),t("code",[e._v("system")]),e._v(" entry point that can only be called by\nnative (blockchain) modules to expose admin functionality if desired. ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/793",target:"_blank",rel:"noopener noreferrer"}},[e._v("#793"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Add extra field "),t("code",[e._v("submessages")]),e._v(" to "),t("code",[e._v("Response")]),e._v(", such that you can\nget a callback from these messages after their execution (success or failure).\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/796",target:"_blank",rel:"noopener noreferrer"}},[e._v("#796"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Added "),t("code",[e._v("reply")]),e._v(' entry point that will receive all callbacks from\nsubmessages dispatched by this contract. This is only required if contract\nreturns "submessages" (above). ('),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/796",target:"_blank",rel:"noopener noreferrer"}},[e._v("#796"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Implement "),t("code",[e._v("From<Uint128> for String")]),e._v(", "),t("code",[e._v("From<Uint128> for u128")]),e._v("\nas well as "),t("code",[e._v("From<u{32,16,8}> for Uint128")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Create new address type "),t("code",[e._v("Addr")]),e._v(". This is human readable (like\n"),t("code",[e._v("HumanAddr")]),e._v(") but is immutable and always contains a valid address ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Add import "),t("code",[e._v("addr_validate")]),e._v(" ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Add "),t("code",[e._v("BankMsg::Burn")]),e._v(" variant when you want the tokens to\ndisappear ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/860",target:"_blank",rel:"noopener noreferrer"}},[e._v("#860"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Create "),t("code",[e._v("Fraction<T>")]),e._v(" trait to represent a fraction "),t("code",[e._v("p")]),e._v("/"),t("code",[e._v("q")]),e._v(" with\nintegers "),t("code",[e._v("p")]),e._v(" and "),t("code",[e._v("q")]),e._v(". "),t("code",[e._v("Decimal")]),e._v(" now implements "),t("code",[e._v("Fraction<u128>")]),e._v(", which\nprovides public getters "),t("code",[e._v("::numerator()")]),e._v(" and "),t("code",[e._v("::denominator()")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Add "),t("code",[e._v("Decimal::inv")]),e._v(" that returns "),t("code",[e._v("1/d")]),e._v(" for decimal "),t("code",[e._v("d")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Add "),t("code",[e._v("Cache::metrics")]),e._v(" to expose internal data for monitoring\npurposes ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/763",target:"_blank",rel:"noopener noreferrer"}},[e._v("#763"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Implement "),t("code",[e._v("PartialOrd")]),e._v(" and "),t("code",[e._v("Ord")]),e._v(" for "),t("code",[e._v("Binary")]),e._v(" using the same\nlexicographical ordering as implemented by "),t("code",[e._v("Vec<u8>")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Implement "),t("code",[e._v("PartialOrd")]),e._v(" and "),t("code",[e._v("Ord")]),e._v(" for "),t("code",[e._v("Addr")]),e._v(" using the same\nlexicographical ordering as implemented by "),t("code",[e._v("String")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Added new "),t("code",[e._v("WasmMsg::UpdateAdmin")]),e._v(" variant that allows an admin\ncontract (eg. multisig) to set another admin ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/900",target:"_blank",rel:"noopener noreferrer"}},[e._v("#900"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Added new "),t("code",[e._v("WasmMsg::ClearAdmin")]),e._v(" variant that allows an admin\ncontract (eg. multisig) to clear the admin, to prevent future migrations\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/900",target:"_blank",rel:"noopener noreferrer"}},[e._v("#900"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Implement "),t("code",[e._v("Display for Coin")]),e._v(" ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/901",target:"_blank",rel:"noopener noreferrer"}},[e._v("#901"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Create "),t("code",[e._v("Uint64")]),e._v(" analogously to "),t("code",[e._v("Uint128")]),e._v(" with string\nserialization allowing the use of the full uint64 range in JSON clients that\nuse float numbers, such as JavaScript and jq.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Create const functions "),t("code",[e._v("Uint64::new")]),e._v(" and "),t("code",[e._v("Uint128::new")]),e._v(" to\ncreate instances in a const context.")])]),e._v(" "),t("h3",{attrs:{id:"changed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changed"}},[e._v("#")]),e._v(" Changed")]),e._v(" "),t("ul",[t("li",[e._v("contracts: Rename "),t("code",[e._v("HandleMsg")]),e._v(" to "),t("code",[e._v("ExecuteMsg")]),e._v(".")]),e._v(" "),t("li",[e._v("all: Rename "),t("code",[e._v("handle")]),e._v(" entry point to "),t("code",[e._v("execute")]),e._v(".")]),e._v(" "),t("li",[e._v("all: Rename "),t("code",[e._v("init")]),e._v(" entry point to "),t("code",[e._v("instantiate")]),e._v(".")]),e._v(" "),t("li",[e._v("all: Rename "),t("code",[e._v("system")]),e._v(" entry point to "),t("code",[e._v("sudo")]),e._v(".")]),e._v(" "),t("li",[e._v("all: Drop support for Rust versions lower than 1.51.0.")]),e._v(" "),t("li",[e._v("all: The "),t("code",[e._v("query")]),e._v(" and "),t("code",[e._v("execute")]),e._v(" entry points are now optional. It is still\nhighly recommended to implement and expose them in almost any use case though.")]),e._v(" "),t("li",[e._v("all: Change the encoding of the key/value region of the "),t("code",[e._v("db_next")]),e._v(" import to a\nmore generic encoding that supports an arbitrary number of sections. This\nencoding can then be reused for other multi value regions.")]),e._v(" "),t("li",[e._v("all: Remove the "),t("code",[e._v("info: MessageInfo")]),e._v(" argument from the "),t("code",[e._v("migrate")]),e._v(" entry point\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/690",target:"_blank",rel:"noopener noreferrer"}},[e._v("#690"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Remove "),t("code",[e._v("from_address")]),e._v(" from "),t("code",[e._v("BankMsg::Send")]),e._v(", as it always sends\nfrom the contract address, and this is consistent with other "),t("code",[e._v("CosmosMsg")]),e._v("\nvariants.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Remove the previously deprecated "),t("code",[e._v("InitResult")]),e._v(", "),t("code",[e._v("HandleResult")]),e._v(",\n"),t("code",[e._v("MigrateResult")]),e._v(" and "),t("code",[e._v("QueryResult")]),e._v(" in order to make error type explicit and\nencourage migration to custom errors.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Add a "),t("code",[e._v("data")]),e._v(" field to "),t("code",[e._v("InitResponse")]),e._v(" the same way as in\n"),t("code",[e._v("MigrateResponse")]),e._v(" and "),t("code",[e._v("HandleResponse")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Rename "),t("code",[e._v("MessageInfo::sent_funds")]),e._v(" to "),t("code",[e._v("MessageInfo::funds")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Merge response types "),t("code",[e._v("InitResponse")]),e._v(", "),t("code",[e._v("HandleResponse")]),e._v(" and\n"),t("code",[e._v("MigrateResponse")]),e._v(" into the new "),t("code",[e._v("Response")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: Remove "),t("code",[e._v("Default")]),e._v(" implementation from "),t("code",[e._v("HumanAddr")]),e._v(",\n"),t("code",[e._v("CanonicalAddr")]),e._v(", "),t("code",[e._v("ContractInfo")]),e._v(", "),t("code",[e._v("MessageInfo")]),e._v(", "),t("code",[e._v("BlockInfo")]),e._v(" and "),t("code",[e._v("Env")]),e._v(". If you\nneed one of those, you're probably doing something wrong.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Make "),t("code",[e._v("label")]),e._v(" in "),t("code",[e._v("WasmMsg::Instantiate")]),e._v(" non-optional to better\nmatch the Go/database format.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Add new field "),t("code",[e._v("admin")]),e._v(" to "),t("code",[e._v("WasmMsg::Instantiate")]),e._v(" to fully support\n"),t("code",[e._v("MsgInstantiateContract")]),e._v(" from "),t("code",[e._v("x/wasm")]),e._v(" ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/861",target:"_blank",rel:"noopener noreferrer"}},[e._v("#861"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: "),t("code",[e._v("Binary::to_array")]),e._v(" is now generic over the array length instead\nof the output type. As a consequence the obsolete type "),t("code",[e._v("ByteArray")]),e._v(" was\nremoved. The array length is not restricted to 0-64 anymore.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Use const generics to implement "),t("code",[e._v("From<&[u8; LENGTH]> for Binary")]),e._v("\nand "),t("code",[e._v("From<[u8; LENGTH]> for Binary")]),e._v(", such that the array length is not\nrestricted to 0-64 anymore.")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Avoid serialization of Modules in "),t("code",[e._v("InMemoryCache")]),e._v(", for\nperformance. Also, remove "),t("code",[e._v("memory_limit")]),e._v(" from "),t("code",[e._v("InstanceOptions")]),e._v(", and define it\ninstead at "),t("code",[e._v("Cache")]),e._v(" level (same memory limit for all cached instances).\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/697",target:"_blank",rel:"noopener noreferrer"}},[e._v("#697"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: Rename type "),t("code",[e._v("KV")]),e._v(" to "),t("code",[e._v("Pair")]),e._v(" in order to comply to naming\nconvention as enforced by clippy rule "),t("code",[e._v("upper_case_acronyms")]),e._v(" from Rust 1.51.0\non.")]),e._v(" "),t("li",[e._v("cosmwasm-std: "),t("code",[e._v("ContractInfo::address")]),e._v(" and "),t("code",[e._v("MessageInfo::sender")]),e._v(" are now of\ntype "),t("code",[e._v("Addr")]),e._v(". The value of those fields is created by the host and thus valid.")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Bump required marker export "),t("code",[e._v("cosmwasm_vm_version_4")]),e._v(" to\n"),t("code",[e._v("interface_version_5")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Rename trait "),t("code",[e._v("Api")]),e._v(" to "),t("code",[e._v("BackendApi")]),e._v(" to better express this is the\nAPI provided by the VM's backend (i.e. the blockchain).")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Rename imports to "),t("code",[e._v("addr_canonicalize")]),e._v(" and "),t("code",[e._v("addr_humanize")]),e._v("\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Replace types "),t("code",[e._v("HumanAddr")]),e._v("/"),t("code",[e._v("CanonicalAddr")]),e._v(" with\n"),t("code",[e._v("&str")]),e._v("/"),t("code",[e._v("String")]),e._v("/"),t("code",[e._v("&[u8]")]),e._v("/"),t("code",[e._v("Vec<u8>")]),e._v(" in the methods of "),t("code",[e._v("BackendApi")]),e._v(". The address\ntypes belong in the contract development and the backend operates on raw\nstrings and binary anyways.")]),e._v(" "),t("li",[e._v("contracts: "),t("code",[e._v("reflect")]),e._v(" contract requires "),t("code",[e._v("stargate")]),e._v(" feature and supports\nredispatching "),t("code",[e._v("Stargate")]),e._v(" and "),t("code",[e._v("IbcMsg::Transfer")]),e._v(" messages ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/692",target:"_blank",rel:"noopener noreferrer"}},[e._v("#692"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-std: The arithmetic methods of "),t("code",[e._v("Uint128")]),e._v(" got a huge overhaul, making\nthem more consistent with the bahaviour of the Rust primitive types. Thank you\n"),t("a",{attrs:{href:"https://github.com/yihuang",target:"_blank",rel:"noopener noreferrer"}},[e._v("@yihuang"),t("OutboundLink")],1),e._v(" for bringing this up and for the great implementation. ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/853",target:"_blank",rel:"noopener noreferrer"}},[e._v("#853"),t("OutboundLink")],1),e._v(")\n"),t("ol",[t("li",[t("code",[e._v("Uint128")]),e._v(" got the new functions "),t("code",[e._v("checked_add")]),e._v(", "),t("code",[e._v("checked_sub")]),e._v(",\n"),t("code",[e._v("checked_mul")]),e._v(", "),t("code",[e._v("checked_div")]),e._v(", "),t("code",[e._v("checked_div_euclid")]),e._v(", "),t("code",[e._v("checked_rem")]),e._v(",\n"),t("code",[e._v("wrapping_add")]),e._v(", "),t("code",[e._v("wrapping_sub")]),e._v(", "),t("code",[e._v("wrapping_mul")]),e._v(", "),t("code",[e._v("wrapping_pow")]),e._v(",\n"),t("code",[e._v("saturating_add")]),e._v(", "),t("code",[e._v("saturating_sub")]),e._v(", "),t("code",[e._v("saturating_mul")]),e._v(" and "),t("code",[e._v("saturating_pow")]),e._v("\nwhich match their equivalent in "),t("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.u128.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("u128"),t("OutboundLink")],1),e._v(" except that instead of "),t("code",[e._v("Option")]),e._v(" the\nchecked methods return a "),t("code",[e._v("Result")]),e._v(" with an "),t("code",[e._v("OverflowError")]),e._v(" or\n"),t("code",[e._v("DivideByZeroError")]),e._v(" that carries a few debug information and can directly\nbe converted to "),t("code",[e._v("StdError")]),e._v("/"),t("code",[e._v("StdResult")]),e._v(" by using the "),t("code",[e._v("?")]),e._v(" operator.")]),e._v(" "),t("li",[t("code",[e._v("StdError::Underflow")]),e._v(" and "),t("code",[e._v("StdError::underflow")]),e._v(" were removed in favour of\n"),t("code",[e._v("StdError::Overflow")]),e._v(". "),t("code",[e._v("StdError::DivideByZeroError")]),e._v(" was added.")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("-")]),e._v(" operator ("),t("code",[e._v("impl ops::Sub<Uint128> for Uint128")]),e._v(") was removed\nbecause it returned a "),t("code",[e._v("StdResult")]),e._v(" instead of panicking in the case of an\noverflow. This behaviour was inconsistent with "),t("code",[e._v("+")]),e._v(" and the Rust standard\nlibrary. Please use the explicit "),t("code",[e._v("*_sub")]),e._v(" methods introduced above. In a\ncouple of releases from now, we want to introduce the operator again with\npanicking overflow behaviour ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/858",target:"_blank",rel:"noopener noreferrer"}},[e._v("#858"),t("OutboundLink")],1),e._v(").")])])]),e._v(" "),t("li",[e._v("cosmwasm-std: Replace "),t("code",[e._v("HumanAddr")]),e._v(" with "),t("code",[e._v("String")]),e._v(" in "),t("code",[e._v("BankQuery")]),e._v(", "),t("code",[e._v("StakingQuery")]),e._v("\nand "),t("code",[e._v("WasmQuery")]),e._v(" query requests ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: In staking query response types "),t("code",[e._v("Delegation")]),e._v(", "),t("code",[e._v("FullDelegation")]),e._v("\nand "),t("code",[e._v("Validator")]),e._v(" the validator address fields were changed from "),t("code",[e._v("HumanAddr")]),e._v(" to\n"),t("code",[e._v("String")]),e._v(". The new "),t("code",[e._v("Addr")]),e._v(" type cannot be used here because it only supports\nstandard account addresses via "),t("code",[e._v("Api::addr_*")]),e._v(" ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/871",target:"_blank",rel:"noopener noreferrer"}},[e._v("#871"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Change address types in "),t("code",[e._v("BankMsg")]),e._v(", "),t("code",[e._v("IbcMsg")]),e._v(" and "),t("code",[e._v("WasmMsg")]),e._v(" from\n"),t("code",[e._v("HumanAddr")]),e._v(" to "),t("code",[e._v("String")]),e._v(" ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: "),t("code",[e._v("Api::addr_humanize")]),e._v(" now returns "),t("code",[e._v("Addr")]),e._v(" instead of "),t("code",[e._v("HumanAddr")]),e._v("\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Hide "),t("code",[e._v("StakingMsg")]),e._v(", "),t("code",[e._v("CosmosMsg::Staking")]),e._v(",\n"),t("code",[e._v("AllDelegationsResponse")]),e._v(", "),t("code",[e._v("BondedDenomResponse")]),e._v(", "),t("code",[e._v("Delegation")]),e._v(",\n"),t("code",[e._v("FullDelegation")]),e._v(", "),t("code",[e._v("StakingQuery")]),e._v(", "),t("code",[e._v("Validator")]),e._v(", "),t("code",[e._v("ValidatorsResponse")]),e._v(" and\n"),t("code",[e._v("testing::StakingQuerier")]),e._v(" behind the "),t("code",[e._v("staking")]),e._v(" feature flag to make those only\navailable in contracts built for PoS chains.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Remove "),t("code",[e._v("StakingMsg::Withdraw")]),e._v(" in favour of\n"),t("code",[e._v("DistributionMsg::SetWithdrawAddress")]),e._v(" and\n"),t("code",[e._v("DistributionMsg::WithdrawDelegatorReward")]),e._v(" ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/848",target:"_blank",rel:"noopener noreferrer"}},[e._v("#848"),t("OutboundLink")],1),e._v(").")]),e._v(" "),t("li",[e._v("cosmwasm-std: Rename "),t("code",[e._v("StakingQuery::Validators")]),e._v(", "),t("code",[e._v("ValidatorsResponse")]),e._v(" and\n"),t("code",[e._v("QuerierWrapper::query_validators")]),e._v(" to "),t("code",[e._v("StakingQuery::AllValidators")]),e._v(",\n"),t("code",[e._v("AllValidatorsResponse")]),e._v(" and "),t("code",[e._v("QuerierWrapper.query_all_validators")]),e._v(". Add\n"),t("code",[e._v("StakingQuery::Validator")]),e._v(", "),t("code",[e._v("ValidatorResponse")]),e._v(" and\n"),t("code",[e._v("QuerierWrapper::query_validator")]),e._v(" to allow querying a single validator.\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/879",target:"_blank",rel:"noopener noreferrer"}},[e._v("#879"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("li",[e._v("cosmwasm-schema: Make first argument non-mutable in "),t("code",[e._v("export_schema_with_title")]),e._v("\nfor consistency with "),t("code",[e._v("export_schema")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: The block time in "),t("code",[e._v("BlockInfo::time")]),e._v(" is now a "),t("code",[e._v("Timestamp")]),e._v(".\n"),t("code",[e._v("BlockInfo::time_nanos")]),e._v(" was removed.")])]),e._v(" "),t("h3",{attrs:{id:"deprecated"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deprecated"}},[e._v("#")]),e._v(" Deprecated")]),e._v(" "),t("ul",[t("li",[e._v("cosmwasm-std: "),t("code",[e._v("InitResponse")]),e._v(", "),t("code",[e._v("MigrateResponse")]),e._v(" and "),t("code",[e._v("HandleResponse")]),e._v(" are\ndeprecated in favour of the new "),t("code",[e._v("Response")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: "),t("code",[e._v("Context")]),e._v(" is deprecated in favour of the new mutable helpers in\n"),t("code",[e._v("Response")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-std: "),t("code",[e._v("HumanAddr")]),e._v(" is not much more than an alias to "),t("code",[e._v("String")]),e._v(" and it\ndoes not provide significant safety advantages. With CosmWasm 0.14, we now use\n"),t("code",[e._v("String")]),e._v(" when there was "),t("code",[e._v("HumanAddr")]),e._v(" before. There is also the new "),t("code",[e._v("Addr")]),e._v(",\nwhich holds a validated immutable human readable address. ("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/pull/802",target:"_blank",rel:"noopener noreferrer"}},[e._v("#802"),t("OutboundLink")],1),e._v(")")])]),e._v(" "),t("h2",{attrs:{id:"_0-13-2-2021-01-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-13-2-2021-01-14"}},[e._v("#")]),e._v(" [0.13.2] - 2021-01-14")]),e._v(" "),t("h2",{attrs:{id:"changed-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changed-2"}},[e._v("#")]),e._v(" Changed")]),e._v(" "),t("ul",[t("li",[e._v("cosmwasm-vm: Update Wasmer to 1.0.1.")])]),e._v(" "),t("h2",{attrs:{id:"_0-13-1-2021-01-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-13-1-2021-01-12"}},[e._v("#")]),e._v(" [0.13.1] - 2021-01-12")]),e._v(" "),t("h3",{attrs:{id:"added-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#added-2"}},[e._v("#")]),e._v(" Added")]),e._v(" "),t("ul",[t("li",[e._v("cosmwasm-std: Add the new "),t("code",[e._v("#[entry_point]")]),e._v(" macro attribute that serves as an\nalternative implementation to "),t("code",[e._v("cosmwasm_std::create_entry_points!(contract)")]),e._v("\nand "),t("code",[e._v("cosmwasm_std::create_entry_points_with_migration!(contract)")]),e._v(". Both ways\nare supported in the 0.13 series.")])]),e._v(" "),t("h2",{attrs:{id:"_0-13-0-2021-01-06"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-13-0-2021-01-06"}},[e._v("#")]),e._v(" [0.13.0] – 2021-01-06")]),e._v(" "),t("h2",{attrs:{id:"added-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#added-3"}},[e._v("#")]),e._v(" Added")]),e._v(" "),t("ul",[t("li",[e._v("cosmwasm-std: Extend binary to array support to 64 bytes.")])]),e._v(" "),t("h2",{attrs:{id:"changed-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changed-3"}},[e._v("#")]),e._v(" Changed")]),e._v(" "),t("ul",[t("li",[e._v("all: Drop support for Rust versions lower than 1.47.0.")]),e._v(" "),t("li",[e._v("cosmwasm-std: Remove "),t("code",[e._v("cosmwasm_std::testing::MockApi::new")]),e._v(". Use\n"),t("code",[e._v("MockApi::default")]),e._v(" instead.")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Upgrade Wasmer to 1.0 and adapt all the internal workings\naccordingly.")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Export method "),t("code",[e._v("cosmwasm_vm::Cache::stats")]),e._v(" and response type\n"),t("code",[e._v("Stats")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Remove "),t("code",[e._v("cosmwasm_vm::testing::MockApi::new")]),e._v(". Use\n"),t("code",[e._v("MockApi::default")]),e._v(" instead.")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Convert field "),t("code",[e._v("Instance::api")]),e._v(" to a method.")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Change order of generic arguments for consistency in "),t("code",[e._v("Instance")]),e._v(",\n"),t("code",[e._v("Cache")]),e._v(" and "),t("code",[e._v("Backend")]),e._v(" to always match "),t("code",[e._v("<A: Api, S: Storage, Q: Querier>")]),e._v(".")]),e._v(" "),t("li",[e._v("cosmwasm-vm: Remove "),t("code",[e._v("Instance::get_memory_size")]),e._v(". Use "),t("code",[e._v("Instance::memory_pages")]),e._v("\ninstead.")])]),e._v(" "),t("h2",{attrs:{id:"_0-12-1-2020-12-09"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-12-1-2020-12-09"}},[e._v("#")]),e._v(" 0.12.1 (2020-12-09)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Deprecate "),t("code",[e._v("InitResult")]),e._v(", "),t("code",[e._v("HandleResult")]),e._v(", "),t("code",[e._v("MigrateResult")]),e._v(" and "),t("code",[e._v("QueryResult")]),e._v(" in\norder to make error type explicit an encourage migration to custom errors.")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("Deref")]),e._v(" for "),t("code",[e._v("QuerierWrapper")]),e._v(", such that "),t("code",[e._v("QuerierWrapper")]),e._v(" behaves\nlike a smart pointer to "),t("code",[e._v("Querier")]),e._v(" allowing you to access "),t("code",[e._v("Querier")]),e._v(" methods\ndirectly.")])]),e._v(" "),t("h2",{attrs:{id:"_0-12-0-2020-11-19"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-12-0-2020-11-19"}},[e._v("#")]),e._v(" 0.12.0 (2020-11-19)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Remove the previously deprecated "),t("code",[e._v("StdError::Unauthorized")]),e._v(". Contract specific\nerrors should be implemented using custom error types now (see\n"),t("RouterLink",{attrs:{to:"/learn/MIGRATING.html"}},[e._v("migration guide")]),e._v(" 0.10 -> 0.11).")],1),e._v(" "),t("li",[e._v("Use dependency "),t("code",[e._v("thiserror")]),e._v(" instead of "),t("code",[e._v("snafu")]),e._v(" to implement "),t("code",[e._v("StdError")]),e._v(". Along\nwith this change, the "),t("code",[e._v("backtraces")]),e._v(" feature now requires Rust nightly.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("StdError::ParseErr::source")]),e._v(" to "),t("code",[e._v("StdError::ParseErr::source_type")]),e._v(" and\n"),t("code",[e._v("StdError::SerializeErr::target")]),e._v(" to "),t("code",[e._v("StdError::SerializeErr::target_type")]),e._v(" to\nwork around speacial treatment of the field name "),t("code",[e._v("source")]),e._v(" in thiserror.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("Extern")]),e._v(" to "),t("code",[e._v("Deps")]),e._v(" to unify naming.")]),e._v(" "),t("li",[e._v("Simplify ownership of calling "),t("code",[e._v("handle")]),e._v(", etc. with "),t("code",[e._v("Deps")]),e._v(" and "),t("code",[e._v("DepsMut")]),e._v(" struct\nthat just contains references ("),t("code",[e._v("DepsMut")]),e._v(" has "),t("code",[e._v("&mut Storage")]),e._v(" otherwise the\nsame)")]),e._v(" "),t("li",[e._v("Remove unused "),t("code",[e._v("Deps::change_querier")]),e._v(". If you need this or similar\nfunctionality, create a new struct with the right querier.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("ReadonlyStorage")]),e._v(". You can just use "),t("code",[e._v("Storage")]),e._v(" everywhere. And use\n"),t("code",[e._v("&Storage")]),e._v(" to provide readonly access. This was only needed to let\n"),t("code",[e._v("PrefixedStorage")]),e._v("/"),t("code",[e._v("ReadonlyPrefixedStorage")]),e._v(" implement the common interface,\nwhich is something we don't need.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-storage")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PrefixedStorage")]),e._v("/"),t("code",[e._v("ReadonlyPrefixedStorage")]),e._v(" do not implement the\n"),t("code",[e._v("Storage")]),e._v("/"),t("code",[e._v("ReadonlyStorage")]),e._v(" traits anymore. If you need nested prefixes, you\nneed to construct them directly via "),t("code",[e._v("PrefixedStorage::multilevel")]),e._v(" and\n"),t("code",[e._v("ReadonlyPrefixedStorage::multilevel")]),e._v(".")]),e._v(" "),t("li",[e._v("Remove unused "),t("code",[e._v("TypedStorage")]),e._v(". If you need this or similar functionality, you\nprobably want to use "),t("code",[e._v("Bucket")]),e._v(" or "),t("code",[e._v("Singleton")]),e._v(". If you really need it, please\ncopy the v0.11 code into your project.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("StorageTransaction")]),e._v(" along with "),t("code",[e._v("transactional")]),e._v(" and "),t("code",[e._v("RepLog")]),e._v(". This has\nnot been used actively for contract development and is now maintained in a\ncontract testing framework.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[e._v("Remove "),t("code",[e._v("Storage::range")]),e._v(" and "),t("code",[e._v("StorageIterator")]),e._v(". The storage implementation is\nnow responsible for maintaining iterators internally and make them accessible\nvia the new "),t("code",[e._v("Storage::scan")]),e._v(" and "),t("code",[e._v("Storage::next")]),e._v(" methods.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("FfiError::IteratorDoesNotExist")]),e._v(". Looking at this, "),t("code",[e._v("FfiError")]),e._v(" should\nprobably be renamed to something that includes before, on and behind the FFI\nboundary to Go.")]),e._v(" "),t("li",[t("code",[e._v("MockStorage")]),e._v(" now implementes the new "),t("code",[e._v("Storage")]),e._v(" trait and has an additional\n"),t("code",[e._v("MockStorage::all")]),e._v(" for getting all elements of an iterator in tests.")]),e._v(" "),t("li",[e._v("Remove unused "),t("code",[e._v("Extern::change_querier")]),e._v(". If you need this or similar\nfunctionality, create a new struct with the right querier.")]),e._v(" "),t("li",[e._v("Let "),t("code",[e._v("Instance::from_code")]),e._v(" and "),t("code",[e._v("CosmCache::get_instance")]),e._v(" take options as an\n"),t("code",[e._v("InstanceOptions")]),e._v(" struct. This contains "),t("code",[e._v("gas_limit")]),e._v(" and "),t("code",[e._v("print_debug")]),e._v(" for now\nand can easily be extended. "),t("code",[e._v("cosmwasm_vm::testing::mock_instance_options")]),e._v(" can\nbe used for creating such a struct in integration tests.")]),e._v(" "),t("li",[e._v("Make "),t("code",[e._v("FileSystemCache")]),e._v(" crate internal. This should be used via "),t("code",[e._v("CosmCache")]),e._v(".")]),e._v(" "),t("li",[e._v("Fix return type of "),t("code",[e._v("FileSystemCache::load")]),e._v(" to "),t("code",[e._v("VmResult<Option<Module>>")]),e._v(" in\norder to differentiate missing files from errors.")]),e._v(" "),t("li",[e._v("Add in-memory caching for recently used Wasm modules.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("CosmCache")]),e._v(" to just "),t("code",[e._v("cosmwasm_vm::Cache")]),e._v(" and add "),t("code",[e._v("CacheOptions")]),e._v(" to\nconfigure it.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("Extern")]),e._v(" to "),t("code",[e._v("Backend")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("mock_dependencies")]),e._v(" to "),t("code",[e._v("mock_backend")]),e._v(" and\n"),t("code",[e._v("mock_dependencies_with_balances")]),e._v(" to "),t("code",[e._v("mock_backend_with_balances")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("FfiError")]),e._v("/"),t("code",[e._v("FfiResult")]),e._v(" to "),t("code",[e._v("BackendError")]),e._v("/"),t("code",[e._v("BackendResult")]),e._v(" and adapt\n"),t("code",[e._v("VmError")]),e._v(" accordingly.")])]),e._v(" "),t("h2",{attrs:{id:"_0-11-2-2020-10-26"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-11-2-2020-10-26"}},[e._v("#")]),e._v(" 0.11.2 (2020-10-26)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Implement "),t("code",[e._v("From<std::str::Utf8Error>")]),e._v(" and "),t("code",[e._v("From<std::string::FromUtf8Error>")]),e._v("\nfor "),t("code",[e._v("StdError")]),e._v(".")]),e._v(" "),t("li",[e._v("Generalize denom argument from "),t("code",[e._v("&str")]),e._v(" to "),t("code",[e._v("S: Into<String>")]),e._v(" in "),t("code",[e._v("coin")]),e._v(", "),t("code",[e._v("coins")]),e._v("\nand "),t("code",[e._v("Coin::new")]),e._v(".")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("PartialEq")]),e._v(" between "),t("code",[e._v("Binary")]),e._v(" and "),t("code",[e._v("Vec<u8>")]),e._v("/"),t("code",[e._v("&[u8]")]),e._v(".")]),e._v(" "),t("li",[e._v("Add missing "),t("code",[e._v("PartialEq")]),e._v(" implementations between "),t("code",[e._v("HumanAddr")]),e._v(" and "),t("code",[e._v("str")]),e._v("/"),t("code",[e._v("&str")]),e._v(".")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Binary::to_array")]),e._v(", which allows you to copy binary content into a\nfixed-length "),t("code",[e._v("u8")]),e._v(" array. This is espeically useful for creating integers from\nbinary data.")])]),e._v(" "),t("h2",{attrs:{id:"_0-11-1-2020-10-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-11-1-2020-10-12"}},[e._v("#")]),e._v(" 0.11.1 (2020-10-12)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Implement "),t("code",[e._v("Hash")]),e._v(" and "),t("code",[e._v("Eq")]),e._v(" for "),t("code",[e._v("Binary")]),e._v(" to allow using "),t("code",[e._v("Binary")]),e._v(" in "),t("code",[e._v("HashSet")]),e._v("\nand "),t("code",[e._v("HashMap")]),e._v(".")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("Hash")]),e._v(" and "),t("code",[e._v("Eq")]),e._v(" for "),t("code",[e._v("CanonicalAddr")]),e._v(" to allow using "),t("code",[e._v("CanonicalAddr")]),e._v("\nin "),t("code",[e._v("HashSet")]),e._v(" and "),t("code",[e._v("HashMap")]),e._v(".")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("Add")]),e._v(", "),t("code",[e._v("AddAssign")]),e._v(" and "),t("code",[e._v("Sub")]),e._v(" with references on the right hand side\nfor "),t("code",[e._v("Uint128")]),e._v(".")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("Sum<Uint128>")]),e._v(" and "),t("code",[e._v("Sum<&'a Uint128>")]),e._v(" for "),t("code",[e._v("Uint128")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"_0-11-0-2020-10-08"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-11-0-2020-10-08"}},[e._v("#")]),e._v(" 0.11.0 (2020-10-08)")]),e._v(" "),t("p",[t("strong",[e._v("all")])]),e._v(" "),t("ul",[t("li",[e._v("Drop support for Rust versions lower than 1.45.2.")]),e._v(" "),t("li",[e._v("The serialization of the result from "),t("code",[e._v("init")]),e._v("/"),t("code",[e._v("migrate")]),e._v("/"),t("code",[e._v("handle")]),e._v("/"),t("code",[e._v("query")]),e._v(" changed\nin an incompatible way. See the new "),t("code",[e._v("ContractResult")]),e._v(" and "),t("code",[e._v("SystemResult")]),e._v(" types\nand their documentation.")]),e._v(" "),t("li",[e._v("Pass "),t("code",[e._v("Env")]),e._v(" into "),t("code",[e._v("query")]),e._v(" as well. As this doesn't have "),t("code",[e._v("MessageInfo")]),e._v(", we\nremoved "),t("code",[e._v("MessageInfo")]),e._v(" from "),t("code",[e._v("Env")]),e._v(" and pass that as a separate argument to\n"),t("code",[e._v("init")]),e._v(", "),t("code",[e._v("handle")]),e._v(", and "),t("code",[e._v("query")]),e._v(". See the example\n"),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/blob/master/README.md#implementing-the-smart-contract",target:"_blank",rel:"noopener noreferrer"}},[e._v("type definitions in the README"),t("OutboundLink")],1),e._v(" to\nsee how to update your contract exports (just add one extra arg each).")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Add "),t("code",[e._v("time_nanos")]),e._v(" to "),t("code",[e._v("BlockInfo")]),e._v(" allowing access to high precision block times.")]),e._v(" "),t("li",[e._v("Change "),t("code",[e._v("FullDelegation::accumulated_rewards")]),e._v(" from "),t("code",[e._v("Coin")]),e._v(" to "),t("code",[e._v("Vec<Coin>")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("InitResponse::log")]),e._v(", "),t("code",[e._v("MigrateResponse::log")]),e._v(" and "),t("code",[e._v("HandleResponse::log")]),e._v("\nto "),t("code",[e._v("InitResponse::attributes")]),e._v(", "),t("code",[e._v("MigrateResponse::attributes")]),e._v(" and\n"),t("code",[e._v("HandleResponse::attributes")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("LogAttribute")]),e._v(" to "),t("code",[e._v("Attribute")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("log")]),e._v(" to "),t("code",[e._v("attr")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("Context::add_log")]),e._v(" to "),t("code",[e._v("Context::add_attribute")]),e._v(".")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Api::debug")]),e._v(" for emitting debug messages during development.")]),e._v(" "),t("li",[e._v("Fix error type for response parsing errors in "),t("code",[e._v("ExternalQuerier::raw_query")]),e._v(".\nThis was "),t("code",[e._v("Ok(Err(StdError::ParseErr))")]),e._v(" instead of\n"),t("code",[e._v("Err(SystemError::InvalidResponse)")]),e._v(", implying an error created in the target\ncontract.")]),e._v(" "),t("li",[e._v("Deprecate "),t("code",[e._v("StdError::Unauthorized")]),e._v(" and "),t("code",[e._v("StdError::unauthorized")]),e._v(" in favour of\ncustom errors. From now on "),t("code",[e._v("StdError")]),e._v(" should only be created by the standard\nlibrary and should only contain cases the standard library needs.")]),e._v(" "),t("li",[e._v("Let "),t("code",[e._v("impl Display for CanonicalAddr")]),e._v(" use upper case hex instead of base64.\nThis also affects "),t("code",[e._v("CanonicalAddr::to_string")]),e._v(".")]),e._v(" "),t("li",[e._v("Create trait "),t("code",[e._v("CustomQuery")]),e._v(" for the generic argument in\n"),t("code",[e._v("QueryRequest<C: CustomQuery>")]),e._v(". This allows us to provide\n"),t("code",[e._v("impl<C: CustomQuery> From<C> for QueryRequest<C>")]),e._v(" for any custom query.")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("From<Binary> for Vec<u8>")]),e._v(".")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("From<CanonicalAddr> for Vec<u8>")]),e._v(".")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Binary::into_vec")]),e._v(" and "),t("code",[e._v("CanonicalAddr::into_vec")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("canonical_length")]),e._v(" argument was removed from "),t("code",[e._v("mock_dependencies")]),e._v(",\n"),t("code",[e._v("mock_dependencies_with_balances")]),e._v(". In the now deprecated "),t("code",[e._v("MockApi::new")]),e._v(", the\nargument is unused. Contracts should not need to set this value and usually\nshould not make assumptions about the value.")]),e._v(" "),t("li",[e._v("The canonical address encoding in "),t("code",[e._v("MockApi::canonical_address")]),e._v(" and\n"),t("code",[e._v("MockApi::human_address")]),e._v(" was changed to an unpredicatable represenation of\nnon-standard length that aims to destroy most of the input structure.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-storage")])]),e._v(" "),t("ul",[t("li",[e._v("Change order of arguments such that "),t("code",[e._v("storage")]),e._v(" is always first followed by\nnamespace in "),t("code",[e._v("Bucket::new")]),e._v(", "),t("code",[e._v("Bucket::multilevel")]),e._v(", "),t("code",[e._v("ReadonlyBucket::new")]),e._v(",\n"),t("code",[e._v("ReadonlyBucket::multilevel")]),e._v(", "),t("code",[e._v("bucket")]),e._v(" and "),t("code",[e._v("bucket_read")]),e._v(".")]),e._v(" "),t("li",[e._v("Change order of arguments such that "),t("code",[e._v("storage")]),e._v(" is always first followed by\nnamespace in "),t("code",[e._v("PrefixedStorage::new")]),e._v(", "),t("code",[e._v("PrefixedStorage::multilevel")]),e._v(",\n"),t("code",[e._v("ReadonlyPrefixedStorage::new")]),e._v(", "),t("code",[e._v("ReadonlyPrefixedStorage::multilevel")]),e._v(",\n"),t("code",[e._v("prefixed")]),e._v(" and "),t("code",[e._v("prefixed_read")]),e._v(".")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("CosmCache::new")]),e._v(", "),t("code",[e._v("Instance::from_code")]),e._v(" and "),t("code",[e._v("Instance::from_module")]),e._v(" now take\nan additional argument to enable/disable printing debug logs from contracts.")]),e._v(" "),t("li",[e._v("Bump required export "),t("code",[e._v("cosmwasm_vm_version_3")]),e._v(" to "),t("code",[e._v("cosmwasm_vm_version_4")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("canonical_length")]),e._v(" argument was removed from "),t("code",[e._v("mock_dependencies")]),e._v(",\n"),t("code",[e._v("mock_dependencies_with_balances")]),e._v(" and "),t("code",[e._v("MockApi::new_failing")]),e._v(". In the now\ndeprecated "),t("code",[e._v("MockApi::new")]),e._v(", the argument is unused. Contracts should not need\nto set this value and usually should not make assumptions about the value.")]),e._v(" "),t("li",[e._v("The canonical address encoding in "),t("code",[e._v("MockApi::canonical_address")]),e._v(" and\n"),t("code",[e._v("MockApi::human_address")]),e._v(" was changed to an unpredicatable represenation of\nnon-standard length that aims to destroy most of the input structure.")])]),e._v(" "),t("h2",{attrs:{id:"_0-10-1-2020-08-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-10-1-2020-08-25"}},[e._v("#")]),e._v(" 0.10.1 (2020-08-25)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Fix bug where "),t("code",[e._v("ExternalStorage.range()")]),e._v(" would cause VM error if either lower\nor upper bound was set\n("),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/508",target:"_blank",rel:"noopener noreferrer"}},[e._v("#508"),t("OutboundLink")],1),e._v(")")])]),e._v(" "),t("h2",{attrs:{id:"_0-10-0-2020-07-30"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-10-0-2020-07-30"}},[e._v("#")]),e._v(" 0.10.0 (2020-07-30)")]),e._v(" "),t("p",[t("strong",[e._v("all")])]),e._v(" "),t("ul",[t("li",[e._v("Drop support for Rust versions lower than 1.44.1.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Remove error helpers "),t("code",[e._v("generic_err")]),e._v(", "),t("code",[e._v("invalid_base64")]),e._v(", "),t("code",[e._v("invalid_utf8")]),e._v(",\n"),t("code",[e._v("not_found")]),e._v(", "),t("code",[e._v("parse_err")]),e._v(", "),t("code",[e._v("serialize_err")]),e._v(", "),t("code",[e._v("underflow")]),e._v(", "),t("code",[e._v("unauthorized")]),e._v(" in\nfavour of "),t("code",[e._v("StdError::generic_err")]),e._v(" and friends.")]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("From<&[u8; $N]> for Binary")]),e._v(" and "),t("code",[e._v("From<[u8; $N]> for Binary")]),e._v(" for all\n"),t("code",[e._v("$N <= 32")]),e._v(".")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Context")]),e._v(" object that can be used to build Init/Handle/Migrate response\nvia "),t("code",[e._v("add_log")]),e._v(", "),t("code",[e._v("add_message")]),e._v(", "),t("code",[e._v("set_data")]),e._v(" and then convert to the proper type\nvia "),t("code",[e._v("into")]),e._v(" or "),t("code",[e._v("try_into")]),e._v(". Option to simplify response construction.")]),e._v(" "),t("li",[e._v("Env uses "),t("code",[e._v("HumanAddr")]),e._v(" for "),t("code",[e._v("message.sender")]),e._v(" and "),t("code",[e._v("contract_address")])]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("Api")]),e._v(" argument from "),t("code",[e._v("mock_env")])]),e._v(" "),t("li",[e._v("Implement "),t("code",[e._v("From<&[u8]>")]),e._v(" and "),t("code",[e._v("From<Vec<u8>>")]),e._v(" for "),t("code",[e._v("CanonicalAddr")])])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[e._v("Remove unused cache size argument from "),t("code",[e._v("CosmCache")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("set_gas_limit")]),e._v(" now panics if the given gas limit exceeds the max. supported\nvalue.")]),e._v(" "),t("li",[e._v("Increase the max. supported value for gas limit from 10_000_000_000 to\n0x7FFFFFFFFFFFFFFF.")]),e._v(" "),t("li",[e._v("Add checks to "),t("code",[e._v("get_region")]),e._v(" for failing early when the contract sends a Region\npointer to the VM that is not backed by a plausible Region. This helps\ndevelopment of standard libraries.")]),e._v(" "),t("li",[e._v("Create dedicated "),t("code",[e._v("RegionValidationError")]),e._v(" and "),t("code",[e._v("RegionValidationResult")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("Api::human_address")]),e._v(" and "),t("code",[e._v("Api::canonical_address")]),e._v(" now return a pair of return\ndata and gas usage.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("NextItem")]),e._v(" in favour of a more advanced "),t("code",[e._v("FfiResult<T>")]),e._v(", which is used\nto store the return result and the gas information consistently across all\nAPIs. "),t("code",[e._v("FfiResult<T>")]),e._v(" was changed to "),t("code",[e._v("(Result<T, FfiError>, GasInfo)")]),e._v(".")]),e._v(" "),t("li",[e._v("Create error type "),t("code",[e._v("FfiError::InvalidUtf8")]),e._v(" for the cases where the backend\nsends invalid UTF-8 in places that expect strings.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("FfiError::Other")]),e._v(" in favour of "),t("code",[e._v("FfiError::UserErr")]),e._v(" and\n"),t("code",[e._v("FfiError::Unknown")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("canonicalize_address")]),e._v(" and "),t("code",[e._v("humanize_address")]),e._v(" imports now report user\nerrors to the contract.")]),e._v(" "),t("li",[e._v("Bump "),t("code",[e._v("cosmwasm_vm_version_2")]),e._v(" to "),t("code",[e._v("cosmwasm_vm_version_3")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("Querier::raw_query")]),e._v(" and "),t("code",[e._v("QuerierResult")]),e._v(" were removed in favour of the new\n"),t("code",[e._v("Querier::query_raw")]),e._v(", which includes a gas limit parameter for the query.")])]),e._v(" "),t("h2",{attrs:{id:"_0-9-4-2020-07-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-4-2020-07-16"}},[e._v("#")]),e._v(" 0.9.4 (2020-07-16)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[e._v("Add "),t("code",[e._v("Instance::create_gas_report")]),e._v(" returning a gas report including the\noriginal limit, the remaining gas and the internally/externally used gas.")])]),e._v(" "),t("h2",{attrs:{id:"_0-9-3-2020-07-08"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-3-2020-07-08"}},[e._v("#")]),e._v(" 0.9.3 (2020-07-08)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-storage")])]),e._v(" "),t("ul",[t("li",[e._v("Add "),t("code",[e._v(".remove()")]),e._v(" method to "),t("code",[e._v("Bucket")]),e._v(" and "),t("code",[e._v("Singleton")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"_0-9-2-2020-06-29"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-2-2020-06-29"}},[e._v("#")]),e._v(" 0.9.2 (2020-06-29)")]),e._v(" "),t("ul",[t("li",[e._v("Downgrade wasmer to 0.17.0.")])]),e._v(" "),t("h2",{attrs:{id:"_0-9-1-2020-06-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-1-2020-06-25"}},[e._v("#")]),e._v(" 0.9.1 (2020-06-25)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Replace type "),t("code",[e._v("Never")]),e._v(" with "),t("code",[e._v("Empty")]),e._v(" because enums with no cases cannot be\nexpressed in valid JSON Schema.")])]),e._v(" "),t("h2",{attrs:{id:"_0-9-0-2020-06-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-0-2020-06-25"}},[e._v("#")]),e._v(" 0.9.0 (2020-06-25)")]),e._v(" "),t("p",[e._v("Note: this version contains an API bug and should not be used (see\nhttps://github.com/CosmWasm/cosmwasm/issues/451).")]),e._v(" "),t("p",[t("strong",[e._v("all")])]),e._v(" "),t("ul",[t("li",[e._v("Upgrade wasmer to 0.17.1.")]),e._v(" "),t("li",[e._v("Drop support for Rust versions lower than 1.43.1")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ReadonlyStorage::get")]),e._v(" and all its implementations now return\n"),t("code",[e._v("Option<Vec<u8>>")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("ReadonlyStorage::range")]),e._v(" and all its implementations now always succeed and\nreturn an iterator instead of a result. This is now an iterator over\n"),t("code",[e._v("Option<KV>")]),e._v(" instead of "),t("code",[e._v("Option<StdResult<KV>>")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("Storage::{set, remove}")]),e._v(" and all their implementations no longer have a return\nvalue. Previously they returned "),t("code",[e._v("StdResult<()>")]),e._v(".")]),e._v(" "),t("li",[e._v("Trait "),t("code",[e._v("Querier")]),e._v(" is not "),t("code",[e._v("Clone")]),e._v(" and "),t("code",[e._v("Send")]),e._v(" anymore.")]),e._v(" "),t("li",[t("code",[e._v("consume_region")]),e._v(" panics on null pointers and returns "),t("code",[e._v("Vec<u8>")]),e._v(" instead of\n"),t("code",[e._v("StdResult<Vec<u8>>")]),e._v(".")]),e._v(" "),t("li",[e._v("Added contract migration mechanism. Contracts can now optionally export a\n"),t("code",[e._v("migrate")]),e._v(" function with the following definition:\n    "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"ZXh0ZXJuICZxdW90O0MmcXVvdDsgZm4gbWlncmF0ZShlbnZfcHRyOiB1MzIsIG1zZ19wdHI6IHUzMikgLSZndDsgdTMyOwo="}})],1),e._v(" "),t("li",[e._v("InitResponse no longer has a data field. We always return the contract address\nin the data field in the blockchain and don't allow you to override. "),t("code",[e._v("handle")]),e._v("\ncan still make use of the field.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("MockQuerier::with_staking")]),e._v(" to "),t("code",[e._v("MockQuerier::update_staking")]),e._v(" to match\n"),t("code",[e._v("::update_balance")]),e._v(".")]),e._v(" "),t("li",[e._v("The obsolete "),t("code",[e._v("StdError::NullPointer")]),e._v(" and "),t("code",[e._v("null_pointer")]),e._v(" were removed.")]),e._v(" "),t("li",[e._v("Error creator functions are now in type itself, e.g.\n"),t("code",[e._v("StdError::invalid_base64")]),e._v(" instead of "),t("code",[e._v("invalid_base64")]),e._v(". The free functions are\ndeprecated and will be removed before 1.0.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-storage")])]),e._v(" "),t("ul",[t("li",[e._v("Remove "),t("code",[e._v("transactional_deps")]),e._v(". Use "),t("code",[e._v("transactional")]),e._v(" that just provides a\ntransactional storage instead.")]),e._v(" "),t("li",[t("code",[e._v("get_with_prefix")]),e._v(" returns "),t("code",[e._v("Option<Vec<u8>>")]),e._v(" instead of\n"),t("code",[e._v("StdResult<Option<Vec<u8>>>")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("set_with_prefix")]),e._v(" and "),t("code",[e._v("remove_with_prefix")]),e._v(" return nothing instead of\n"),t("code",[e._v("StdResult<()>")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("RepLog::commit")]),e._v(" no longer returns any value (always succeeds).")]),e._v(" "),t("li",[t("code",[e._v("Op::apply")]),e._v(" no longer returns any value (always succeeds).")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[e._v("The export "),t("code",[e._v("allocate")]),e._v(" must not return 0 as a valid address. The contract is\nresponsible for avoiding this offset in the linear memory.")]),e._v(" "),t("li",[e._v("The import "),t("code",[e._v("db_read")]),e._v(" now allocates memory for the return value as part of the\ncall and returns a pointer to the value as "),t("code",[e._v("u32")]),e._v(". The return value 0 means\n"),t("em",[e._v("key does not exist")]),e._v(".")]),e._v(" "),t("li",[e._v("The import "),t("code",[e._v("db_next")]),e._v(" now allocates a memory region for the return key and\nvalue as part of the call and returns a pointer to the region as "),t("code",[e._v("u32")]),e._v(". The\ndata in the region is stored in the format "),t("code",[e._v("value || key || keylen")]),e._v(". As\nbefore, an empty key means "),t("em",[e._v("no more value")]),e._v(".")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("Instance::get_gas")]),e._v(" in favour of "),t("code",[e._v("Instance::get_gas_left")]),e._v(".")]),e._v(" "),t("li",[e._v("All calls from the VM layer to the chain layer also return the amount of gas\nused on success. (This is represented by replacing the return value with\n"),t("code",[e._v("(value, used_gas)")]),e._v("). Gas usage across the system is then tracked in the VM\nlayer, which allows us to halt the contract during an import, as soon as we\ncan prove that we used all allocated gas.")]),e._v(" "),t("li",[e._v("Remove instance caching, which is disabled since 0.8.1 as it is not stable.\nRemove "),t("code",[e._v("CosmCache::store_instance")]),e._v("; you can not call "),t("code",[e._v("Instance::recylce")]),e._v("\ndirectly to get back the external dependencies.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("MockQuerier::with_staking")]),e._v(" to "),t("code",[e._v("MockQuerier::update_staking")]),e._v(" to match\n"),t("code",[e._v("::update_balance")]),e._v(".")]),e._v(" "),t("li",[e._v("Instead of panicking, "),t("code",[e._v("read_region")]),e._v("/"),t("code",[e._v("write_region")]),e._v("/"),t("code",[e._v("get_region")]),e._v("/"),t("code",[e._v("set_region")]),e._v("\nnow return a new "),t("code",[e._v("CommunicationError::DerefErr")]),e._v(" when dereferencing a pointer\nprovided by the contract fails.")]),e._v(" "),t("li",[t("code",[e._v("FfiError::set_message")]),e._v(" was removed because errors should be immutable. Use\n"),t("code",[e._v("FfiError::other")]),e._v(" to create an error with the desired error message.")]),e._v(" "),t("li",[e._v("The import implementation of "),t("code",[e._v("db_scan")]),e._v(" now errors instead of returning an\nerror code for an invalid order value. The return type was changed to "),t("code",[e._v("u32")]),e._v(".")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("StorageIteratorItem")]),e._v(" in favour of the new types "),t("code",[e._v("StorageIterator")]),e._v(" and\n"),t("code",[e._v("NextItem")]),e._v(". "),t("code",[e._v("StorageIterator")]),e._v(" is a custom iterator type that does not\nimplement Rust's "),t("code",[e._v("Iterator")]),e._v(" trait, allowing it to communicate the used gas\nvalue of the last "),t("code",[e._v("next")]),e._v(" call to the VM.")]),e._v(" "),t("li",[e._v("Don't report any "),t("code",[e._v("VmError")]),e._v(" back to the contract in "),t("code",[e._v("canonicalize_address")]),e._v(" and\n"),t("code",[e._v("humanize_address")]),e._v(". Only invalid inputs should be reported.")]),e._v(" "),t("li",[e._v("Move error cases "),t("code",[e._v("VmError::RegionLengthTooBig")]),e._v(" and "),t("code",[e._v("VmError::RegionTooSmall")]),e._v("\ninto "),t("code",[e._v("CommunicationError")]),e._v(".")]),e._v(" "),t("li",[e._v("In the "),t("code",[e._v("canonicalize_address")]),e._v(" inplementation, invalid UTF-8 inputs now result\nin "),t("code",[e._v("CommunicationError::InvalidUtf8")]),e._v(", which is not reported back to the\ncontract. A standard library should ensure this never happens by correctly\nencoding string input values.")]),e._v(" "),t("li",[e._v("Merge trait "),t("code",[e._v("ReadonlyStorage")]),e._v(" into "),t("code",[e._v("Storage")]),e._v(".")]),e._v(" "),t("li",[e._v("The imports "),t("code",[e._v("canonicalize_address")]),e._v(" and "),t("code",[e._v("humanize_address")]),e._v(" now return a memory\naddress to an error "),t("code",[e._v("Region")]),e._v(". If this address is 0, the call succeeded.")]),e._v(" "),t("li",[e._v("Bump "),t("code",[e._v("cosmwasm_vm_version_1")]),e._v(" to "),t("code",[e._v("cosmwasm_vm_version_2")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"_0-8-1-2020-06-08"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-8-1-2020-06-08"}},[e._v("#")]),e._v(" 0.8.1 (2020-06-08)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("The arguments of "),t("code",[e._v("log")]),e._v(" changed from "),t("code",[e._v("&str")]),e._v(" to "),t("code",[e._v("ToString")]),e._v(", allowing to pass\nvarious types like "),t("code",[e._v("String")]),e._v(", "),t("code",[e._v("HumanAddr")]),e._v(", "),t("code",[e._v("Uint128")]),e._v(" or primitive integers\ndirectly.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("From<Vec<u8>>")]),e._v(" and "),t("code",[e._v("Into<Vec<u8>>")]),e._v(" implementations for "),t("code",[e._v("Binary")]),e._v(" for\nzero-copy conversions.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[e._v("Deprecated "),t("code",[e._v("Instance::get_gas")]),e._v(" in favour of "),t("code",[e._v("Instance::get_gas_left")]),e._v(". The old\nmethod will remain available for a while but will issue a deprecation warning\nwhen used.")]),e._v(" "),t("li",[e._v("Disable instance caching by treating every cache size as 0. Instance caching\nis not safe as the same Wasm memory is reused across multiple executions.")]),e._v(" "),t("li",[e._v("The storage of an "),t("code",[e._v("Instance")]),e._v(" can now be set into readonly mode, which is\nchecked by the writing storage imports "),t("code",[e._v("db_write")]),e._v(" and "),t("code",[e._v("db_remove")]),e._v(". Read-only\nmode is off by default for backwards compatibility. "),t("code",[e._v("call_query_raw")]),e._v(" now sets\nthe instance's storage to readonly.")]),e._v(" "),t("li",[e._v("The new error case "),t("code",[e._v("VmError::WriteAccessDenied")]),e._v(" is returned when a contract\ncalls an import that potentially writes to storage during a query.")])]),e._v(" "),t("h2",{attrs:{id:"_0-8-0-2020-05-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-8-0-2020-05-25"}},[e._v("#")]),e._v(" 0.8.0 (2020-05-25)")]),e._v(" "),t("p",[t("strong",[e._v("all")])]),e._v(" "),t("ul",[t("li",[e._v("Upgrade schemars to 0.7.")]),e._v(" "),t("li",[e._v("Upgrade wasmer to 0.17.")]),e._v(" "),t("li",[e._v("Update snafu to 0.6.")]),e._v(" "),t("li",[e._v("Minimal supported Rust version is 1.41.")]),e._v(" "),t("li",[e._v("Split "),t("code",[e._v("Region.len")]),e._v(" into "),t("code",[e._v("Region.capacity")]),e._v(" and "),t("code",[e._v("Region.length")]),e._v(", where the new\ncapacity is the number of bytes available and "),t("code",[e._v("length")]),e._v(" is the number of bytes\nused. This is a breaking change in the contract-vm interface, which requires\nthe same memory layout of the "),t("code",[e._v("Region")]),e._v(" struct on both sides.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("remove")]),e._v(" method to "),t("code",[e._v("Storage")]),e._v(" trait.")]),e._v(" "),t("li",[e._v("(feature-flagged) Add "),t("code",[e._v("range")]),e._v(" method to "),t("code",[e._v("ReadonlyStorage")]),e._v(" trait. This returns\nan iterator that covers all or a subset of the items in the db ordered\nascending or descending by key.")]),e._v(" "),t("li",[e._v("Add new feature flag "),t("code",[e._v("iterator")]),e._v(" to both packages to enable "),t("code",[e._v("range")]),e._v("\nfunctionality. This is used to allow potential porting to chains that use\nMerkle Tries (which don't allow iterating over ranges).")]),e._v(" "),t("li",[e._v("All serialized JSON types now use snake_case mappings for names. This means\nenum fields like "),t("code",[e._v("ChangeOwner")]),e._v(" will map to "),t("code",[e._v("change_owner")]),e._v(" in the underlying\nJSON, not "),t("code",[e._v("changeowner")]),e._v(". This is a breaking change for the clients.")]),e._v(" "),t("li",[e._v("Public interface between contract and runtime no longer uses "),t("code",[e._v("String")]),e._v(" to\nrepresent an error, but rather serializes "),t("code",[e._v("ApiError")]),e._v(" as a rich JSON error.")]),e._v(" "),t("li",[e._v("Return value from "),t("code",[e._v("env.write_db")]),e._v(" and "),t("code",[e._v("env.remove_db")]),e._v(" to allow error reporting.")]),e._v(" "),t("li",[e._v("Query responses are now required to contain valid JSON.")]),e._v(" "),t("li",[e._v("Renamed all "),t("code",[e._v("*_db")]),e._v(" wasm imports to "),t("code",[e._v("db_*")])]),e._v(" "),t("li",[e._v("Merge "),t("code",[e._v("cw-storage")]),e._v(" repo as subpackage, now "),t("code",[e._v("cosmwasm-storage")])]),e._v(" "),t("li",[e._v("Add iterator support to "),t("code",[e._v("cosmwasm-storage")])]),e._v(" "),t("li",[t("code",[e._v("Coin.amount")]),e._v(" is now "),t("code",[e._v("Uint128")]),e._v(" rather than "),t("code",[e._v("String")]),e._v(". Uint128 serializes as a\nstring in JSON, but parses into a u128 data in memory. It also has some\noperator overloads to allow easy math operations on "),t("code",[e._v("Coin")]),e._v(" types, as well as\nenforcing valid amounts.")]),e._v(" "),t("li",[t("code",[e._v("Env")]),e._v(" no longer has a "),t("code",[e._v("contract.balance")]),e._v(" element. If you need this info,\nplease use the "),t("code",[e._v("Querier")]),e._v(" to get this info. As of Cosmos-SDK 0.39 this needs\nextra storage queries to get the balance, so we only do those queries when\nneeded.")]),e._v(" "),t("li",[t("code",[e._v("Env.message.sent_funds")]),e._v(" is a "),t("code",[e._v("Vec<Coin>")]),e._v(" not "),t("code",[e._v("Option<Vec<Coin>>")]),e._v(". We will\nnormalize the go response in "),t("code",[e._v("go-cosmwasm")]),e._v(" before sending it to the contract.")]),e._v(" "),t("li",[t("code",[e._v("Env.message.signer")]),e._v(" was renamed to "),t("code",[e._v("Env.message.sender")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("Env.block.{height,time}")]),e._v(" are now "),t("code",[e._v("u64")]),e._v(" rather than "),t("code",[e._v("i64")]),e._v(".")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-schema")])]),e._v(" "),t("ul",[t("li",[e._v("This new crate now contains the implementations for generating JSON Schema\nfiles from interface types. It exposes the functions "),t("code",[e._v("export_schema")]),e._v(",\n"),t("code",[e._v("export_schema_with_title")]),e._v(", and "),t("code",[e._v("schema_for")]),e._v(".")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-std")])]),e._v(" "),t("ul",[t("li",[e._v("Make all symbols from "),t("code",[e._v("cosmwasm::memory")]),e._v(" crate internal, as those symbols are\nnot needed by users of the library.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("cosmwasm::mock::dependencies")]),e._v(" -> "),t("code",[e._v("cosmwasm::mock::mock_dependencies")]),e._v("\nto differentiate between testing and production "),t("code",[e._v("External")]),e._v(".")]),e._v(" "),t("li",[e._v("Export all symbols from "),t("code",[e._v("cosmwasm::mock")]),e._v(" as the new non-wasm32 module\n"),t("code",[e._v("cosmwasm::testing")]),e._v(". Export all remaining symbols at top level (e.g.\n"),t("code",[e._v("use cosmwasm::traits::{Api, Storage};")]),e._v(" + "),t("code",[e._v("use cosmwasm::encoding::Binary;")]),e._v("\nbecomes "),t("code",[e._v("use cosmwasm::{Api, Binary, Storage};")]),e._v(").")]),e._v(" "),t("li",[e._v("Rename package "),t("code",[e._v("cosmwasm")]),e._v(" to "),t("code",[e._v("cosmwasm-std")]),e._v(".")]),e._v(" "),t("li",[e._v("The export "),t("code",[e._v("allocate")]),e._v(" does not zero-fill the allocated memory anymore.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("remove_db")]),e._v(" to the required imports of a contract.")]),e._v(" "),t("li",[e._v("(feature-flagged) add "),t("code",[e._v("scan_db")]),e._v(" and "),t("code",[e._v("next_db")]),e._v(" callbacks from wasm contract to\nVM.")]),e._v(" "),t("li",[t("code",[e._v("serde::{from_slice, to_vec}")]),e._v(" return "),t("code",[e._v("cosmwasm_std::Result")]),e._v(", no more need to\nuse "),t("code",[e._v(".context(...)")]),e._v(" when calling these functions")]),e._v(" "),t("li",[e._v("Split "),t("code",[e._v("Response")]),e._v(" into "),t("code",[e._v("InitResponse")]),e._v(" and "),t("code",[e._v("HandleResponse")]),e._v("; split\n"),t("code",[e._v("ContractResult")]),e._v(" into "),t("code",[e._v("InitResult")]),e._v(" and "),t("code",[e._v("HandleResult")]),e._v(".")]),e._v(" "),t("li",[e._v("Create explicit "),t("code",[e._v("QueryResponse")]),e._v(", analogue to "),t("code",[e._v("InitResponse")]),e._v(" and\n"),t("code",[e._v("HandleResponse")]),e._v(".")]),e._v(" "),t("li",[e._v("The exports "),t("code",[e._v("cosmwasm_vm_version_1")]),e._v(", "),t("code",[e._v("allocate")]),e._v(" and "),t("code",[e._v("deallocate")]),e._v(" are now\nprivate and can only be called via the Wasm export. Make sure to "),t("code",[e._v("use")]),e._v(" "),t("code",[e._v("cosmwasm_std")]),e._v(" at least once in the contract to pull in the C exports.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Querier")]),e._v(" trait and "),t("code",[e._v("QueryRequest")]),e._v(" for query callbacks from the contract,\nalong with "),t("code",[e._v("SystemError")]),e._v(" type for the runtime rejecting messages.")]),e._v(" "),t("li",[t("code",[e._v("QueryRequest")]),e._v(" takes a generic "),t("code",[e._v("Custom(T)")]),e._v(" type that is passed opaquely to the\nend consumer ("),t("code",[e._v("wasmd")]),e._v(" or integration test stubs), allowing custom queries to\nnative code.")]),e._v(" "),t("li",[t("code",[e._v("{Init,Handle,Query}Result")]),e._v(" are now just aliases for a concrete "),t("code",[e._v("ApiResult")]),e._v("\ntype.")]),e._v(" "),t("li",[e._v("Support results up to 128 KiB in "),t("code",[e._v("ExternalStorage.get")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("Storage")]),e._v(" trait's "),t("code",[e._v(".get")]),e._v(", "),t("code",[e._v(".set")]),e._v(" and "),t("code",[e._v(".remove")]),e._v(" now return a "),t("code",[e._v("Result")]),e._v(" to\nallow propagation of errors.")]),e._v(" "),t("li",[e._v("Move "),t("code",[e._v("transactional")]),e._v(", "),t("code",[e._v("transactional_deps")]),e._v(", "),t("code",[e._v("RepLog")]),e._v(", "),t("code",[e._v("StorageTransaction")]),e._v("\ninto crate "),t("code",[e._v("cosmwasm-storage")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("Result")]),e._v(" to "),t("code",[e._v("StdResult")]),e._v(" to differentiate between the auto-"),t("code",[e._v("use")]),e._v("d\n"),t("code",[e._v("core::result::Result")]),e._v(". Fix error argument to "),t("code",[e._v("Error")]),e._v(".")]),e._v(" "),t("li",[e._v("Complete overhaul of "),t("code",[e._v("Error")]),e._v(" into "),t("code",[e._v("StdError")]),e._v(":\n"),t("ul",[t("li",[e._v("The "),t("code",[e._v("StdError")]),e._v(" enum can now be serialized and deserialized (losing its\nbacktrace), which allows us to pass them over the Wasm/VM boundary. This\nallows using fully structured errors in e.g. integration tests.")]),e._v(" "),t("li",[e._v("Auto generated snafu error constructor structs like "),t("code",[e._v("NotFound")]),e._v("/"),t("code",[e._v("ParseErr")]),e._v("/…\nhave been intenalized in favour of error generation helpers like\n"),t("code",[e._v("not_found")]),e._v("/"),t("code",[e._v("parse_err")]),e._v("/…")]),e._v(" "),t("li",[e._v("All error generator functions now return errors instead of results.")]),e._v(" "),t("li",[e._v("Error cases don't contain "),t("code",[e._v("source")]),e._v(" fields anymore. Instead source errors are\nconverted to standard types like "),t("code",[e._v("String")]),e._v(". For this reason, both\n"),t("code",[e._v("snafu::ResultExt")]),e._v(" and "),t("code",[e._v("snafu::OptionExt")]),e._v(" cannot be used anymore.")]),e._v(" "),t("li",[e._v("Backtraces became optional. Use "),t("code",[e._v("RUST_BACKTRACE=1")]),e._v(" to enable them.")]),e._v(" "),t("li",[t("code",[e._v("Utf8Err")]),e._v("/"),t("code",[e._v("Utf8StringErr")]),e._v(" merged into "),t("code",[e._v("StdError::InvalidUtf8")])]),e._v(" "),t("li",[t("code",[e._v("Base64Err")]),e._v(" renamed into "),t("code",[e._v("StdError::InvalidBase64")])]),e._v(" "),t("li",[t("code",[e._v("ContractErr")]),e._v("/"),t("code",[e._v("DynContractErr")]),e._v(" merged into "),t("code",[e._v("StdError::GeneralErr")])]),e._v(" "),t("li",[e._v("The unused "),t("code",[e._v("ValidationErr")]),e._v(" was removed")]),e._v(" "),t("li",[t("code",[e._v("StdError")]),e._v(" is now\n"),t("a",{attrs:{href:"https://doc.rust-lang.org/1.35.0/unstable-book/language-features/non-exhaustive.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("non_exhaustive"),t("OutboundLink")],1),e._v(",\nmaking new error cases non-breaking changes.")])])]),e._v(" "),t("li",[t("code",[e._v("ExternalStorage.get")]),e._v(" now returns an empty vector if a storage entry exists\nbut has an empty value. Before, this was normalized to "),t("code",[e._v("None")]),e._v(".")]),e._v(" "),t("li",[e._v("Reorganize "),t("code",[e._v("CosmosMsg")]),e._v(" enum types. They are now split by modules:\n"),t("code",[e._v("CosmosMsg::Bank(BankMsg)")]),e._v(", "),t("code",[e._v("CosmosMsg::Custom(T)")]),e._v(", "),t("code",[e._v("CosmosMsg::Wasm(WasmMsg)")])]),e._v(" "),t("li",[e._v("CosmosMsg is now generic over the content of "),t("code",[e._v("Custom")]),e._v(" variant. This allows\nblockchains to support custom native calls in their Cosmos-SDK apps and\ndevelopers to make use of them in CosmWasm apps without forking the\n"),t("code",[e._v("cosmwasm-vm")]),e._v(" and "),t("code",[e._v("go-cosmwasm")]),e._v(" runtime.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("staking")]),e._v(" feature flag to expose new "),t("code",[e._v("StakingMsg")]),e._v(" types under "),t("code",[e._v("CosmosMsg")]),e._v("\nand new "),t("code",[e._v("StakingRequest")]),e._v(" types under "),t("code",[e._v("QueryRequest")]),e._v(".")]),e._v(" "),t("li",[e._v("Add support for mocking-out staking queries via "),t("code",[e._v("MockQuerier.with_staking")])]),e._v(" "),t("li",[t("code",[e._v("from_slice")]),e._v("/"),t("code",[e._v("from_binary")]),e._v(" now require result type to be "),t("code",[e._v("DeserializeOwned")]),e._v(",\ni.e. the result must not contain references such as "),t("code",[e._v("&str")]),e._v(".")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm-vm")])]),e._v(" "),t("ul",[t("li",[e._v("Make "),t("code",[e._v("Instance.memory")]),e._v("/"),t("code",[e._v(".allocate")]),e._v("/"),t("code",[e._v(".deallocate")]),e._v("/"),t("code",[e._v(".func")]),e._v(" crate internal. A\nuser of the VM must not access the instance's memory directly.")]),e._v(" "),t("li",[e._v("The imports "),t("code",[e._v("env.canonicalize_address")]),e._v(", "),t("code",[e._v("env.humanize_address")]),e._v(" and\n"),t("code",[e._v("env.read_db")]),e._v(" don't return the number of bytes written anymore. This value is\nnow available in the resulting regions. Negative return values are errors, 0\nis success and values greater than 0 are reserved for future use.")]),e._v(" "),t("li",[e._v("Change the required interface version guard export from "),t("code",[e._v("cosmwasm_api_0_6")]),e._v(" to\n"),t("code",[e._v("cosmwasm_vm_version_1")]),e._v(".")]),e._v(" "),t("li",[e._v("Provide implementations for "),t("code",[e._v("remove_db")]),e._v(" and (feature-flagged) "),t("code",[e._v("scan_db")]),e._v(" and\n"),t("code",[e._v("next_db")])]),e._v(" "),t("li",[e._v("Provide custom "),t("code",[e._v("serde::{from_slice, to_vec}")]),e._v(" implementation separate from\n"),t("code",[e._v("cosmwasm_std")]),e._v(", so we can return cosmwasm-vm specific "),t("code",[e._v("Result")]),e._v(" (only used\ninternally).")]),e._v(" "),t("li",[t("code",[e._v("call_{init,handle,query}")]),e._v(" and the "),t("code",[e._v("cosmwasm_vm::testing")]),e._v(" wrappers return\nstandard "),t("code",[e._v("Result")]),e._v(" types now, eg. "),t("code",[e._v("Result<HandleResponse, ApiError>")]),e._v(".")]),e._v(" "),t("li",[e._v("Add length limit when reading memory from the instance to protect against\nmalicious contracts creating overly large "),t("code",[e._v("Region")]),e._v("s.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Instance.get_memory_size")]),e._v(", giving you the peak memory consumption of an\ninstance.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("cosmwasm_vm::errors::CacheExt")]),e._v(".")]),e._v(" "),t("li",[e._v("Move "),t("code",[e._v("cosmwasm_vm::errors::{Error, Result}")]),e._v(" to\n"),t("code",[e._v("cosmwasm_vm::{VmError, VmResult}")]),e._v(" and remove generic error type from result.")]),e._v(" "),t("li",[e._v("The import "),t("code",[e._v("db_read")]),e._v(" now returns an error code if the storage key does not\nexist. The latest standard library converts this error code back to a "),t("code",[e._v("None")]),e._v("\nvalue. This allows differentiating non-existent and empty storage entries.")]),e._v(" "),t("li",[e._v("Make "),t("code",[e._v("Instance::from_module")]),e._v(", "),t("code",[e._v("::from_wasmer")]),e._v(" and "),t("code",[e._v("::recycle")]),e._v(" crate-internal.")]),e._v(" "),t("li",[e._v("Create explicit, public "),t("code",[e._v("Checksum")]),e._v(" type to identify Wasm blobs.")]),e._v(" "),t("li",[t("code",[e._v("CosmCache::new")]),e._v(" now takes supported features as an argument.")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("VmError::RegionTooSmallErr")]),e._v(" to "),t("code",[e._v("VmError::RegionTooSmall")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("VmError::RegionLengthTooBigErr")]),e._v(" to "),t("code",[e._v("VmError::RegionLengthTooBig")]),e._v(".")]),e._v(" "),t("li",[e._v("Change property types to owned string in "),t("code",[e._v("VmError::UninitializedContextData")]),e._v(",\n"),t("code",[e._v("VmError::ConversionErr")]),e._v(", "),t("code",[e._v("VmError::ParseErr")]),e._v(" and "),t("code",[e._v("VmError::SerializeErr")]),e._v(".")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("VmError::IoErr")]),e._v(" in favour of "),t("code",[e._v("VmError::CacheErr")]),e._v(".")]),e._v(" "),t("li",[e._v("Simplify "),t("code",[e._v("VmError::CompileErr")]),e._v(", "),t("code",[e._v("VmError::ResolveErr")]),e._v(" and\n"),t("code",[e._v("VmError::WasmerRuntimeErr")]),e._v(" to just hold a string with the details instead of\nthe source error.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("VmError::WasmerErr")]),e._v(" in favour of the new "),t("code",[e._v("VmError::InstantiationErr")]),e._v(".")]),e._v(" "),t("li",[e._v("The snafu error builders from "),t("code",[e._v("VmError")]),e._v(" are now private, i.e. callers can only\nuse the errors, not create them.")]),e._v(" "),t("li",[t("code",[e._v("VmError")]),e._v(" is now "),t("code",[e._v("#[non_exhaustive]")]),e._v(".")]),e._v(" "),t("li",[e._v("Split "),t("code",[e._v("VmError::RuntimeErr")]),e._v(" in "),t("code",[e._v("VmError::BackendErr")]),e._v(" and\n"),t("code",[e._v("VmError::GenericErr")]),e._v("; rename "),t("code",[e._v("VmError::WasmerRuntimeErr")]),e._v(" to\n"),t("code",[e._v("VmError::RuntimeErr")]),e._v(".")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("Instance.with_querier")]),e._v(" analogue to "),t("code",[e._v("Instance.with_storage")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"_0-7-2-2020-03-23"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-7-2-2020-03-23"}},[e._v("#")]),e._v(" 0.7.2 (2020-03-23)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm")])]),e._v(" "),t("ul",[t("li",[e._v("Fix JSON schema type of "),t("code",[e._v("Binary")]),e._v(" from int array (wrong) to string (right).")]),e._v(" "),t("li",[e._v("Make "),t("code",[e._v("Extern")]),e._v(" not "),t("code",[e._v("Clone")]),e._v("able anymore. Before cloning led to copying the data\nfor mock storage and copying a stateless bridge for the external storage,\nwhich are different semantics.")]),e._v(" "),t("li",[e._v("Remove public "),t("code",[e._v("cosmwasm::imports::dependencies")]),e._v(". A user of this library does\nnot need to call this explicitely. Dependencies are created internally and\npassed as an argument in "),t("code",[e._v("exports::do_init")]),e._v(", "),t("code",[e._v("exports::do_handle")]),e._v(" and\n"),t("code",[e._v("exports::do_query")]),e._v(".")]),e._v(" "),t("li",[e._v("Make "),t("code",[e._v("ExternalStorage")]),e._v(" not "),t("code",[e._v("Clone")]),e._v("able anymore. This does not copy any data,\nso a clone could lead to unexpected results.")])]),e._v(" "),t("h2",{attrs:{id:"_0-7-1-2020-03-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-7-1-2020-03-11"}},[e._v("#")]),e._v(" 0.7.1 (2020-03-11)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm_vm")])]),e._v(" "),t("ul",[t("li",[e._v("Avoid unnecessary panic when checking corrupted wasm file.")]),e._v(" "),t("li",[e._v("Support saving the same wasm to cache multiple times.")])]),e._v(" "),t("h2",{attrs:{id:"_0-7-0-2020-02-26"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-7-0-2020-02-26"}},[e._v("#")]),e._v(" 0.7.0 (2020-02-26)")]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm")])]),e._v(" "),t("ul",[t("li",[e._v("Rename "),t("code",[e._v("Slice")]),e._v(" to "),t("code",[e._v("Region")]),e._v(" to simplify differentiation between Wasm memory\nregion and serde's "),t("code",[e._v("from_slice")])]),e._v(" "),t("li",[e._v("Rename "),t("code",[e._v("Params")]),e._v(" to "),t("code",[e._v("Env")]),e._v(", "),t("code",[e._v("mock_params")]),e._v(" to "),t("code",[e._v("mock_env")]),e._v(" for clearer naming (this\nis information on the execution environment)")]),e._v(" "),t("li",[t("code",[e._v("Response.log")]),e._v(" is not a vector of key/value pairs that can later be indexed by\nTendermint.")])]),e._v(" "),t("p",[t("strong",[e._v("cosmwasm_vm")])]),e._v(" "),t("ul",[t("li",[e._v("Remove export "),t("code",[e._v("cosmwasm_vm::read_memory")]),e._v(". Using this indicates an\narchitectural flaw, since this is a method for host to guest communication\ninside the VM and not needed for users of the VM.")]),e._v(" "),t("li",[e._v("Create new type "),t("code",[e._v("cosmwasm_vm:errors::Error::RegionTooSmallErr")]),e._v(".")]),e._v(" "),t("li",[e._v("Change return type of "),t("code",[e._v("cosmwasm_vm::write_memory")]),e._v(" to "),t("code",[e._v("Result<usize, Error>")]),e._v(" to\nmake it harder to forget handling errors.")]),e._v(" "),t("li",[e._v("Fix missing error propagation in "),t("code",[e._v("do_canonical_address")]),e._v(", "),t("code",[e._v("do_human_address")]),e._v("\nand "),t("code",[e._v("allocate")]),e._v(".")]),e._v(" "),t("li",[e._v("Update error return codes in import "),t("code",[e._v("c_read")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename imports "),t("code",[e._v("c_read")]),e._v("/"),t("code",[e._v("c_write")]),e._v(" to "),t("code",[e._v("read_db")]),e._v("/"),t("code",[e._v("write_db")]),e._v(".")]),e._v(" "),t("li",[e._v("Rename imports "),t("code",[e._v("c_canonical_address")]),e._v("/"),t("code",[e._v("c_human_address")]),e._v(" to\n"),t("code",[e._v("canonicalize_address")]),e._v("/"),t("code",[e._v("humanize_address")]),e._v(".")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("cosmwasm_vm::testing::test_io")]),e._v(" for basic memory allocation/deallocation\ntesting between host and guest.")]),e._v(" "),t("li",[e._v("Make "),t("code",[e._v("ValidationErr.msg")]),e._v(" a dynamic "),t("code",[e._v("String")]),e._v(" including relevant runtime\ninformation.")]),e._v(" "),t("li",[e._v("Remove export "),t("code",[e._v("check_api_compatibility")]),e._v(". The VM will take care of calling it.")]),e._v(" "),t("li",[e._v("Let "),t("code",[e._v("check_api_compatibility")]),e._v(" check imports by fully qualified identifier\n"),t("code",[e._v("<module>.<name>")]),e._v(".")]),e._v(" "),t("li",[e._v("Make gas limit immutable in "),t("code",[e._v("cosmwasm_vm::instance::Instance")]),e._v(". It is passed\nonce at construction time and cannot publicly be manipulated anymore.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("take_storage")]),e._v("/"),t("code",[e._v("leave_storage")]),e._v(" from "),t("code",[e._v("cosmwasm_vm::Instance")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"_0-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-6"}},[e._v("#")]),e._v(" 0.6")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/confio/cosmwasm/issues/73",target:"_blank",rel:"noopener noreferrer"}},[e._v("Define canonical address callbacks"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Use "),t("code",[e._v("&[u8]")]),e._v(" for addresses in params")])]),e._v(" "),t("li",[t("p",[e._v("Allow contracts to resolve human readable addresses ("),t("code",[e._v("&str")]),e._v(") in their json\ninto a fixed-size binary representation")])]),e._v(" "),t("li",[t("p",[e._v("Provide mocks for unit testing and integration tests")])]),e._v(" "),t("li",[t("p",[e._v("Separate out "),t("code",[e._v("Storage")]),e._v(" from "),t("code",[e._v("ReadOnlyStorage")]),e._v(" as separate traits")])])]),e._v(" "),t("h2",{attrs:{id:"_0-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-5"}},[e._v("#")]),e._v(" 0.5")]),e._v(" "),t("h3",{attrs:{id:"_0-5-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-5-2"}},[e._v("#")]),e._v(" 0.5.2")]),e._v(" "),t("p",[e._v("This is the first documented and supported implementation. It contains the basic\nfeature set. "),t("code",[e._v("init")]),e._v(" and "),t("code",[e._v("handle")]),e._v(" supported for modules and can return messages.\nA stub implementation of "),t("code",[e._v("query")]),e._v(" is done, which is likely to be deprecated soon.\nSome main points:")]),e._v(" "),t("ul",[t("li",[e._v("The build-system and unit/integration-test setup is all stabilized.")]),e._v(" "),t("li",[e._v("Cosmwasm-vm supports singlepass and cranelift backends, and caches modules on\ndisk and instances in memory (lru cache).")]),e._v(" "),t("li",[e._v("JSON Schema output works")])]),e._v(" "),t("p",[e._v("All future Changelog entries will reference this base")])])}),[],!1,null,null,null);o.default=n.exports}}]);