(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{655:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"names-and-addresses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#names-and-addresses"}},[e._v("#")]),e._v(" Names and Addresses")]),e._v(" "),a("p",[e._v('Blockchains (almost?) all use addresses to identify external actors via a hash of a public key, and many newer ones extended this to identify on-chain "smart contracts" with unique addresses as well. On chain, addresses are represented by a use a concise, immutable binary format, typically 20 or 32 bytes long, often derived from a hashing function. However, there are many human-readable representations of these binary addresses, which are shown to clients. For example, '),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Bech32",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bech32"),a("OutboundLink")],1),e._v(" "),a("code",[e._v("bc1qc7slrfxkknqcq2jevvvkdgvrt8080852dfjewde450xdlk4ugp7szw5tk9")]),e._v(", hex "),a("code",[e._v("0x8617E340B3D01FA5F11F306F4090FD50E238070D")]),e._v(" or "),a("a",{attrs:{href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("checksumned hex"),a("OutboundLink")],1),e._v(" "),a("code",[e._v("0x5aAeb6053F3E94C9b9A09f33669435E7Ef1BeAed")]),e._v(", and even "),a("a",{attrs:{href:"https://research.kudelskisecurity.com/2018/01/16/blockchains-how-to-steal-millions-in-264-operations/",target:"_blank",rel:"noopener noreferrer"}},[e._v("large integers"),a("OutboundLink")],1),e._v(" "),a("code",[e._v("3040783849904107057L")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"addr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addr"}},[e._v("#")]),e._v(" Addr")]),e._v(" "),a("p",[e._v("Addresses in Cosmos SDK are 20 character long strings, and contain security checks - such as chain-prefix in Bech32, and checksums in Bech32 and checksummed hex (EIP55).\nSince CosmWasm is an extension of Cosmos SDK, it follows the same address rules; wallets, smart contracts, modules have an identifier address with defined prefix. "),a("code",[e._v("cosmos1...")]),e._v(" for gaia, "),a("code",[e._v("wasm1...")]),e._v(" for CosmWasm testnets.")]),e._v(" "),a("p",[e._v("For passing address to contracts, pass it as string and then validate the input to an: "),a("strong",[e._v("Addr")]),e._v(" "),a("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/blob/v0.14.0/packages/std/src/addresses.rs#L31",target:"_blank",rel:"noopener noreferrer"}},[e._v("Addr"),a("OutboundLink")],1),e._v(" is just a wrapper around plain string that provides useful helper functions such as string validation to an address.")]),e._v(" "),a("h2",{attrs:{id:"optional-canonical-addresses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optional-canonical-addresses"}},[e._v("#")]),e._v(" Optional: Canonical Addresses")]),e._v(" "),a("p",[e._v("There is another representation of an address that tackles the case of change of human representation, but this is rare.")]),e._v(" "),a("p",[e._v("For example Bitcoin "),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/BIP_0173",target:"_blank",rel:"noopener noreferrer"}},[e._v("moved from Base58 to Bech32"),a("OutboundLink")],1),e._v(" encoding along with SegWit, and Rise is also "),a("a",{attrs:{href:"https://medium.com/rise-vision/introducing-rise-v2-521a58e1e9de#41d5",target:"_blank",rel:"noopener noreferrer"}},[e._v("moving from Lisk format to Bech32"),a("OutboundLink")],1),e._v(" in the v2 upgrade.")]),e._v(" "),a("p",[e._v("This means that if "),a("code",[e._v("message.signer")]),e._v(" is always the string address that signed the transaction and I use it to look up your account balance, if this encoding ever changed, then you lose access to your account. We clearly need a stable identifier to work with internally.")]),e._v(" "),a("p",[e._v("This is where we define a "),a("em",[e._v("Canonical Address")]),e._v(". This is defined to be stable and unique. That is, for one given account, there is only ever one canonical address (for the life of the blockchain). We define a "),a("em",[e._v("canonical address")]),e._v(" format that potentially multiple string addresses can be converted to. It can be transformed back and forth without any changes")]),e._v(" "),a("p",[e._v("We define the "),a("em",[e._v("Canonical Address")]),e._v(" as the binary representation used internally in the blockchain. This is what the native tokens are indexed by and therefore must never change for the life of an account. This is the representation that can be used for all "),a("strong",[e._v("storage lookups")]),e._v(" (if you use part of an address as the key in the storage).")]),e._v(" "),a("h2",{attrs:{id:"naming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#naming"}},[e._v("#")]),e._v(" Naming")]),e._v(" "),a("p",[e._v("More and more, "),a("a",{attrs:{href:"https://app.ens.domains/about",target:"_blank",rel:"noopener noreferrer"}},[e._v("human"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://docs.blockstack.org/core/naming/introduction.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("readable"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://iov.one",target:"_blank",rel:"noopener noreferrer"}},[e._v("names"),a("OutboundLink")],1),e._v(" are increasingly important in blockchains "),a("a",{attrs:{href:"https://hackernoon.com/everything-you-didnt-know-about-the-handshake-naming-system-how-this-blockchain-project-will-483464309f33",target:"_blank",rel:"noopener noreferrer"}},[e._v("and beyond"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("At one point, we considered making names a first-class citizen of CosmWasm and using them everywhere in messages. Until we realized that accounts can have no name until initialized, and we need a permanently stable "),a("em",[e._v("Address")]),e._v(". However, we would still like names to be as central to the blockchain as possible. To this end, we can consider names as just another form of "),a("em",[e._v("Address")]),e._v(" albeit one that requires a contract query (with storage access) to resolve, not just a call to a pure function.")]),e._v(" "),a("p",[e._v("This actual format and interfaces are still under discussion, and we are still working on a "),a("a",{attrs:{href:"../learn/name-service/intro"}},[e._v("tutorial version of a name service")]),e._v(". However, for sake of argument, imagine we agree every "),a("em",[e._v("Address")]),e._v(" that begins with "),a("code",[e._v(":")]),e._v(" is a name to lookup with the name service, and other ones can be resolved directly with the built-in blockchain resolution function. So when creating a transaction for an escrow, you could use either "),a("code",[e._v('{"arbiter": "cosmos1qqp837a4kvtgplm6uqhdge0zzu6efqgujllfst"}')]),e._v(" or "),a("code",[e._v('{"arbiter": ":alice"}')]),e._v(", performing the resolution inside the contract rather than only in the client. Of course we would need a standard query format for name service, and the calling contract would need to somehow know the address of the canonical name service contract to resolve with, which is why this feature is still under discussion.")]),e._v(" "),a("h3",{attrs:{id:"dids"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dids"}},[e._v("#")]),e._v(" DIDs")]),e._v(" "),a("p",[a("em",[e._v("Note: it will likely be quite some time before this is fully implemented. It serves as design inspiration")])]),e._v(" "),a("p",[e._v("Let's keep imagining what is possible with "),a("em",[e._v("Human Names")]),e._v(', once we develop a solution to the name service issue. We could not just use a reference to resolve a user address, but resolve a contract as well. Maybe we could dispatch a message to an "ERC20" token contract not by its name, but by its '),a("em",[e._v("uniquely registered token ticker")]),e._v(". We would soon need to use some way to distinguish the scope or context of a name. This is where "),a("a",{attrs:{href:"https://www.w3.org/TR/did-core/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Decentralized Identifiers (DIDs)"),a("OutboundLink")],1),e._v(' could come in. Imagine the following message format, that could be used either by a end-client or by a smart contract "actor":')]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"json",base64:"ewogICAgJnF1b3Q7ZGVzdGluYXRpb24mcXVvdDs6ICZxdW90O2RpZDp0b2tlbjpYUk4mcXVvdDssCiAgICAmcXVvdDttc2cmcXVvdDs6IHsKICAgICAgICAmcXVvdDt0cmFuc2ZlciZxdW90OzogewogICAgICAgICAgICAmcXVvdDtmcm9tJnF1b3Q7OiAmcXVvdDtkaWQ6YWNjb3VudDphbGljZSZxdW90OywKICAgICAgICAgICAgJnF1b3Q7dG8mcXVvdDs6ICZxdW90O2RpZDphY2NvdW50OmJvYiZxdW90OywKICAgICAgICAgICAgJnF1b3Q7YW1vdW50JnF1b3Q7OiAmcXVvdDsxMy41NiZxdW90OwogICAgICAgIH0KICAgIH0KfQo="}}),e._v(" "),a("p",[e._v("This would not be some spec to be resolved client-side, but the actual interchange format used on the blockchain. So one smart contract could also dispatch such a message in the course of execution. Do you like this idea? Comments? "),a("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/issues/80",target:"_blank",rel:"noopener noreferrer"}},[e._v("Please add your thoughts on github"),a("OutboundLink")],1),e._v(".")])],1)}),[],!1,null,null,null);t.default=n.exports}}]);