(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{704:function(e,t,a){"use strict";a.r(t);var o=a(0),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"hack-the-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hack-the-contract"}},[e._v("#")]),e._v(" Hack the Contract")]),e._v(" "),a("p",[e._v("Now that you can compile and run tests, let's try to make some changes to the code and you can see if they work. If you didn't do this already in the last section, it is time to clone the examples repo and check out the escrow code:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"Z2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9Db3NtV2FzbS9jb3Ntd2FzbS1leGFtcGxlcwpjZCBjb3Ntd2FzbS1leGFtcGxlcwpnaXQgZmV0Y2ggLS10YWdzCmdpdCBjaGVja291dCBlc2Nyb3ctMC4xMC4wCmNkIGNvbnRyYWN0cy9lc2Nyb3cK"}}),e._v(" "),a("p",[e._v("Note: This guide is compatible with "),a("code",[e._v("CosmWasm v0.14.x")]),e._v(" and "),a("code",[e._v("wasmd v0.16.x")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"a-walk-through-of-the-escrow-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-walk-through-of-the-escrow-contract"}},[e._v("#")]),e._v(" A Walk-Through of the Escrow Contract")]),e._v(" "),a("h3",{attrs:{id:"data-structures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}},[e._v("#")]),e._v(" Data Structures")]),e._v(" "),a("p",[e._v("There are three key data structures used in the contract - for encoding the instantiation message, for encoding the execution messages, and for storing the contract data. We define all messages in "),a("code",[e._v("src/msg.rs")]),e._v(". The "),a("code",[e._v("State")]),e._v(" structs are often in "),a("code",[e._v("state.rs")]),e._v(", but if only one then just inline in "),a("code",[e._v("contracts.rs")]),e._v(".")]),e._v(" "),a("p",[e._v("All of them must be prefixed with a long "),a("code",[e._v("derive")]),e._v(" line to add various functionality. Otherwise, it should be pretty clear how the "),a("code",[e._v("State")]),e._v(" defines the current condition of a contract, and "),a("code",[e._v("InitMsg")]),e._v(" will provide the initial data to configure said contract. Please note that "),a("code",[e._v("State")]),e._v(" is the "),a("em",[e._v("only information")]),e._v(" persisted between multiple contract calls. Purpose of these "),a("code",[e._v("derive")]),e._v(" directives:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Serialize")]),e._v(", "),a("code",[e._v("Deserialize")]),e._v(" generate methods so the "),a("a",{attrs:{href:"https://github.com/serde-rs/json",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("serde-json")]),a("OutboundLink")],1),e._v(" library can de-serialize them (there is no "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Reflection_(computer_programming)",target:"_blank",rel:"noopener noreferrer"}},[e._v("reflection"),a("OutboundLink")],1),e._v(" in rust)")]),e._v(" "),a("li",[a("code",[e._v("Clone")]),e._v(" allows you to make a copy of the object ("),a("code",[e._v("msg.clone()")]),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("Debug")]),e._v(" and "),a("code",[e._v("PartialEq")]),e._v(" are very useful for testing. In particular they allow the use of "),a("code",[e._v("assert_eq!(expected, msg);")])]),e._v(" "),a("li",[a("code",[e._v("JsonSchema")]),e._v(" is needed by "),a("a",{attrs:{href:"https://docs.rs/schemars/0.7.0/schemars",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("schemars")]),a("OutboundLink")],1),e._v(", so we can use "),a("a",{attrs:{href:"https://docs.rs/schemars/0.7.0/schemars/macro.schema_for.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("schema_for!")]),a("OutboundLink")],1),e._v(" to generate the json schema objects (in "),a("code",[e._v("schema/*.json")]),e._v(")")])]),e._v(" "),a("p",[e._v("From "),a("code",[e._v("state.rs")]),e._v(":")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"I1tkZXJpdmUoU2VyaWFsaXplLCBEZXNlcmlhbGl6ZSwgQ2xvbmUsIERlYnVnLCBQYXJ0aWFsRXEsIEpzb25TY2hlbWEpXQpwdWIgc3RydWN0IFN0YXRlIHsKICAgIHB1YiBhcmJpdGVyOiBBZGRyLAogICAgcHViIHJlY2lwaWVudDogQWRkciwKICAgIHB1YiBzb3VyY2U6IEFkZHIsCiAgICBwdWIgZW5kX2hlaWdodDogT3B0aW9uJmx0O3U2NCZndDssCiAgICBwdWIgZW5kX3RpbWU6IE9wdGlvbiZsdDt1NjQmZ3Q7LAp9Cg=="}}),e._v(" "),a("p",[e._v("From "),a("code",[e._v("msg.rs")]),e._v(":")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"I1tkZXJpdmUoU2VyaWFsaXplLCBEZXNlcmlhbGl6ZSwgQ2xvbmUsIERlYnVnLCBQYXJ0aWFsRXEsIEpzb25TY2hlbWEpXQpwdWIgc3RydWN0IEluc3RhbnRpYXRlTXNnIHsKICAgIHB1YiBhcmJpdGVyOiBTdHJpbmcsCiAgICBwdWIgcmVjaXBpZW50OiBTdHJpbmcsCiAgICAvLy8gV2hlbiBlbmQgaGVpZ2h0IHNldCBhbmQgYmxvY2sgaGVpZ2h0IGV4Y2VlZHMgdGhpcyB2YWx1ZSwgdGhlIGVzY3JvdyBpcyBleHBpcmVkLgogICAgLy8vIE9uY2UgYW4gZXNjcm93IGlzIGV4cGlyZWQsIGl0IGNhbiBiZSByZXR1cm5lZCB0byB0aGUgb3JpZ2luYWwgZnVuZGVyICh2aWEgJnF1b3Q7cmVmdW5kJnF1b3Q7KS4KICAgIHB1YiBlbmRfaGVpZ2h0OiBPcHRpb24mbHQ7dTY0Jmd0OywKICAgIC8vLyBXaGVuIGVuZCB0aW1lIChpbiBzZWNvbmRzIHNpbmNlIGVwb2NoIDAwOjAwOjAwIFVUQyBvbiAxIEphbnVhcnkgMTk3MCkgaXMgc2V0IGFuZAogICAgLy8vIGJsb2NrIHRpbWUgZXhjZWVkcyB0aGlzIHZhbHVlLCB0aGUgZXNjcm93IGlzIGV4cGlyZWQuCiAgICAvLy8gT25jZSBhbiBlc2Nyb3cgaXMgZXhwaXJlZCwgaXQgY2FuIGJlIHJldHVybmVkIHRvIHRoZSBvcmlnaW5hbCBmdW5kZXIgKHZpYSAmcXVvdDtyZWZ1bmQmcXVvdDspLgogICAgcHViIGVuZF90aW1lOiBPcHRpb24mbHQ7dTY0Jmd0OywKfQo="}}),e._v(" "),a("p",[e._v("Note that we use "),a("code",[e._v("Addr")]),e._v(", which is a validated address wrapper with some helper functions for storage inside "),a("code",[e._v("State")]),e._v(", while we use invalidated  "),a("code",[e._v("String")]),e._v(" address which should be validated by developer, for messages and anything that interacts with the user. There is "),a("a",{attrs:{href:"../../architecture/addresses"}},[e._v("more info on addresses here")]),e._v(".")]),e._v(" "),a("p",[a("code",[e._v("Option<u64>")]),e._v(" is a way of telling rust this field may be missing. It may either have a value, like "),a("code",[e._v("Some(123456)")]),e._v(" or\nbe "),a("code",[e._v("None")]),e._v(". This means the init message may omit those fields (or pass them as "),a("code",[e._v("null")]),e._v(") and we don't need to use some\nspecial value like "),a("code",[e._v("0")]),e._v(" to signify disabled.")]),e._v(" "),a("p",[e._v("Moving to the "),a("code",[e._v("ExecuteMsg")]),e._v(" type, which defines the different contract methods, we make use of a slightly more complex rust construction, the "),a("a",{attrs:{href:"https://doc.rust-lang.org/stable/rust-by-example/custom_types/enum.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("enum")]),a("OutboundLink")],1),e._v(". This is also known as "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tagged_union",target:"_blank",rel:"noopener noreferrer"}},[e._v("a tagged union or sum type"),a("OutboundLink")],1),e._v(", and contains a fixed set of defined possible data types, or "),a("code",[e._v("variants")]),e._v(", "),a("em",[e._v("exactly one of which must be set")]),e._v(". We use each "),a("code",[e._v("variant")]),e._v(" to encode a different method. For example "),a("code",[e._v("Execute::Refund{}")]),e._v(" is a serializable request to refund the escrow, which is only valid after a timeout.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"I1tkZXJpdmUoU2VyaWFsaXplLCBEZXNlcmlhbGl6ZSwgQ2xvbmUsIERlYnVnLCBQYXJ0aWFsRXEsIEpzb25TY2hlbWEpXQojW3NlcmRlKHJlbmFtZV9hbGwgPSAmcXVvdDtzbmFrZV9jYXNlJnF1b3Q7KV0KcHViIGVudW0gRXhlY3V0ZU1zZyB7CiAgICBBcHByb3ZlIHsKICAgICAgICAvLyByZWxlYXNlIHNvbWUgY29pbnMgLSBpZiBxdWFudGl0eSBpcyBOb25lLCByZWxlYXNlIGFsbCBjb2lucyBpbiBiYWxhbmNlCiAgICAgICAgcXVhbnRpdHk6IE9wdGlvbiZsdDtWZWMmbHQ7Q29pbiZndDsmZ3Q7LAogICAgfSwKICAgIFJlZnVuZCB7fSwKfQo="}}),e._v(" "),a("p",[e._v("You can see another directive here ("),a("code",[e._v('#[serde(rename_all = "snake_case")]')]),e._v("). This ensure the json looks like: "),a("code",[e._v('{"approve": {"quantity": ...}}')]),e._v(" instead of "),a("code",[e._v('{"Approve": {"quantity": ...}}')]),e._v(". This controls the code generated with "),a("code",[e._v("Serialize")]),e._v(" and "),a("code",[e._v("Deserialize")]),e._v(". You see how compile-time codegen (via derive and macros) is a corner-stone of rust, and provides much of the functionality provided by runtime reflection in other, more dynamic, languages.")]),e._v(" "),a("h3",{attrs:{id:"json-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-format"}},[e._v("#")]),e._v(" JSON Format")]),e._v(" "),a("p",[e._v("When a "),a("code",[e._v("ExecuteMsg")]),e._v(" instance is encoded, it will end up looking like "),a("code",[e._v('{"approve": {"quantity": [{"amount": "10", "denom": "ATOM"}]}}')]),e._v(" or "),a("code",[e._v('{"refund": {}}')]),e._v(". This is also the format we should use client side, when submitting a message body to later be processed by "),a("code",[e._v("execute")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"instantiation-logic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instantiation-logic"}},[e._v("#")]),e._v(" Instantiation Logic")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("instantiate")]),e._v(' function will be called exactly once, before the contract is executed. It is a "privileged" function in that it can set configuration that can never be modified by any other method call. If you look at this example, the first line parses the input from raw bytes into our contract-defined message. We then create the initial state, and check if it is expired already. If expired, we return a generic contract error, otherwise, we store the state and return a success code:')]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"cHViIGZuIGluc3RhbnRpYXRlKAogICAgZGVwczogRGVwc011dCwKICAgIGVudjogRW52LAogICAgaW5mbzogTWVzc2FnZUluZm8sCiAgICBtc2c6IEluc3RhbnRpYXRlTXNnLAopIC0mZ3Q7IFJlc3VsdCZsdDtSZXNwb25zZSwgQ29udHJhY3RFcnJvciZndDsgewogICAgbGV0IHN0YXRlID0gU3RhdGUgewogICAgICAgIGFyYml0ZXI6IGRlcHMuYXBpLmFkZHJfdmFsaWRhdGUoJmFtcDttc2cuYXJiaXRlcik/LAogICAgICAgIHJlY2lwaWVudDogZGVwcy5hcGkuYWRkcl92YWxpZGF0ZSgmYW1wO21zZy5yZWNpcGllbnQpPywKICAgICAgICBzb3VyY2U6IGluZm8uc2VuZGVyLAogICAgICAgIGVuZF9oZWlnaHQ6IG1zZy5lbmRfaGVpZ2h0LAogICAgICAgIGVuZF90aW1lOiBtc2cuZW5kX3RpbWUsCiAgICB9OwoKICAgIGlmIHN0YXRlLmlzX2V4cGlyZWQoJmFtcDtlbnYpIHsKICAgICAgICByZXR1cm4gRXJyKENvbnRyYWN0RXJyb3I6OkV4cGlyZWQgewogICAgICAgICAgICBlbmRfaGVpZ2h0OiBtc2cuZW5kX2hlaWdodCwKICAgICAgICAgICAgZW5kX3RpbWU6IG1zZy5lbmRfdGltZSwKICAgICAgICB9KTsKICAgIH0KCiAgICBjb25maWcoZGVwcy5zdG9yYWdlKS5zYXZlKCZhbXA7c3RhdGUpPzsKICAgIE9rKFJlc3BvbnNlOjpkZWZhdWx0KCkpCn0K"}}),e._v(" "),a("p",[a("code",[e._v("config")]),e._v(" is defined in "),a("code",[e._v("state.rs")]),e._v(" and is a helper wrapper for interacting with the underlying "),a("code",[e._v("Storage")]),e._v(". It handles prefixing and de/serializing\nfor you automatically, removing some boilerplate. It is completely optional and you can use "),a("code",[e._v("Storage")]),e._v(" directly as well. We also encourage\nyou to develop other shared libraries for interacting with "),a("code",[e._v("Storage")]),e._v(" if you want to make certain use cases easier (eg. representing a queue):")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"cHViIGZuIGNvbmZpZyhzdG9yYWdlOiAmYW1wO211dCBkeW4gU3RvcmFnZSkgLSZndDsgU2luZ2xldG9uJmx0O1N0YXRlJmd0OyB7CiAgICBzaW5nbGV0b24oc3RvcmFnZSwgQ09ORklHX0tFWSkKfQo="}}),e._v(" "),a("h3",{attrs:{id:"execution-logic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execution-logic"}},[e._v("#")]),e._v(" Execution Logic")]),e._v(" "),a("p",[e._v("Just as "),a("code",[e._v("init")]),e._v(" is the entry point for instantiating a new contract, "),a("code",[e._v("handle")]),e._v(" is the entry point for executing the code. Since "),a("code",[e._v("handle")]),e._v(" takes an "),a("code",[e._v("enum")]),e._v(" with multiple "),a("code",[e._v("variants")]),e._v(", we can't just jump into the business logic, but first start with loading the state, and dispatching the message:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"cHViIGZuIGV4ZWN1dGUoCiAgICBkZXBzOiBEZXBzTXV0LAogICAgZW52OiBFbnYsCiAgICBpbmZvOiBNZXNzYWdlSW5mbywKICAgIG1zZzogRXhlY3V0ZU1zZywKKSAtJmd0OyBSZXN1bHQmbHQ7UmVzcG9uc2UsIENvbnRyYWN0RXJyb3ImZ3Q7IHsKICAgIGxldCBzdGF0ZSA9IGNvbmZpZ19yZWFkKGRlcHMuc3RvcmFnZSkubG9hZCgpPzsKICAgIG1hdGNoIG1zZyB7CiAgICAgICAgRXhlY3V0ZU1zZzo6QXBwcm92ZSB7IHF1YW50aXR5IH0gPSZndDsgdHJ5X2FwcHJvdmUoZGVwcywgZW52LCBzdGF0ZSwgaW5mbywgcXVhbnRpdHkpLAogICAgICAgIEV4ZWN1dGVNc2c6OlJlZnVuZCB7fSA9Jmd0OyB0cnlfcmVmdW5kKGRlcHMsIGVudiwgaW5mbywgc3RhdGUpLAogICAgfQp9Cg=="}}),e._v(" "),a("p",[e._v("CosmWasm parses the incoming json into a contract-specific "),a("code",[e._v("ExecuteMsg")]),e._v(" automatically before calling, assuming a JSON-encoding message. We also see the use of "),a("code",[e._v("config_read")]),e._v(" to load without any boilerplate. Note the trailing "),a("code",[e._v("?")]),e._v(". This works on "),a("code",[e._v("Result")]),e._v(' types and means, "If this is an error, return the underlying error. If this is a success, give me the value". It is a very useful shorthand all over rust and replaces the '),a("code",[e._v("if err != nil { return err }")]),e._v(" boilerplate in Go.")]),e._v(" "),a("p",[e._v("You will also see the "),a("a",{attrs:{href:"https://doc.rust-lang.org/1.30.0/book/2018-edition/ch06-02-match.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("match")]),e._v(" statement"),a("OutboundLink")],1),e._v(". This is another nice Rust idiom, and allows you to "),a("code",[e._v("switch")]),e._v(" over multiple patterns. Here we check the multiple variants of the "),a("code",[e._v("ExecuteMsg")]),e._v(" enum. Note that if you don't cover all cases, the compiler will refuse to proceed.")]),e._v(" "),a("p",[e._v("We pass in "),a("code",[e._v("deps")]),e._v(" to give the handlers access to runtime callbacks, which provide blockchain-specific logic. In particular, we currently use "),a("code",[e._v("deps.api")]),e._v(" to validate "),a("code",[e._v("String")]),e._v(" to "),a("code",[e._v("Addr")]),e._v(" in a blockchain-specific manner. Or verify cryptographic signatures with "),a("code",[e._v("secp256k1_verify,ed25519_verify")]),e._v(". And we also use\n"),a("code",[e._v("deps.querier")]),e._v(" to query the current balance of the contract.")]),e._v(" "),a("p",[e._v("If we now look into the "),a("code",[e._v("try_approve")]),e._v(" function, we will see how we can respond to a message. We can return an "),a("code",[e._v("unauthorized")]),e._v(" error if the "),a("code",[e._v("signer")]),e._v(" is not what we expect, and "),a("code",[e._v("ContractError")]),e._v(" if our business logic rejects the message. The "),a("code",[e._v("let amount =")]),e._v(" line shows how we can use pattern matching to use the number of coins present in the msg if provided, or default to the entire balance of the contract.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Zm4gdHJ5X2FwcHJvdmUoCiAgICBkZXBzOiBEZXBzTXV0LAogICAgZW52OiBFbnYsCiAgICBzdGF0ZTogU3RhdGUsCiAgICBpbmZvOiBNZXNzYWdlSW5mbywKICAgIHF1YW50aXR5OiBPcHRpb24mbHQ7VmVjJmx0O0NvaW4mZ3Q7Jmd0OywKKSAtJmd0OyBSZXN1bHQmbHQ7UmVzcG9uc2UsIENvbnRyYWN0RXJyb3ImZ3Q7IHsKICAgIGlmIGluZm8uc2VuZGVyICE9IHN0YXRlLmFyYml0ZXIgewogICAgICAgIHJldHVybiBFcnIoQ29udHJhY3RFcnJvcjo6VW5hdXRob3JpemVkIHt9KTsKICAgIH0KCiAgICAvLyB0aHJvd3MgZXJyb3IgaWYgc3RhdGUgaXMgZXhwaXJlZAogICAgaWYgc3RhdGUuaXNfZXhwaXJlZCgmYW1wO2VudikgewogICAgICAgIHJldHVybiBFcnIoQ29udHJhY3RFcnJvcjo6RXhwaXJlZCB7CiAgICAgICAgICAgIGVuZF9oZWlnaHQ6IHN0YXRlLmVuZF9oZWlnaHQsCiAgICAgICAgICAgIGVuZF90aW1lOiBzdGF0ZS5lbmRfdGltZSwKICAgICAgICB9KTsKICAgIH0KCiAgICBsZXQgYW1vdW50ID0gaWYgbGV0IFNvbWUocXVhbnRpdHkpID0gcXVhbnRpdHkgewogICAgICAgIHF1YW50aXR5CiAgICB9IGVsc2UgewogICAgICAgIC8vIHJlbGVhc2UgZXZlcnl0aGluZwoKICAgICAgICAvLyBRdWVyaWVyIGd1YXJhbnRlZXMgdG8gcmV0dXJucyB1cC10by1kYXRlIGRhdGEsIGluY2x1ZGluZyBmdW5kcyBzZW50IGluIHRoaXMgaGFuZGxlIG1lc3NhZ2UKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vQ29zbVdhc20vd2FzbWQvYmxvYi9tYXN0ZXIveC93YXNtL2ludGVybmFsL2tlZXBlci9rZWVwZXIuZ28jTDE4NS1MMTkyCiAgICAgICAgZGVwcy5xdWVyaWVyLnF1ZXJ5X2FsbF9iYWxhbmNlcygmYW1wO2Vudi5jb250cmFjdC5hZGRyZXNzKT8KICAgIH07CgogICAgT2soc2VuZF90b2tlbnMoc3RhdGUucmVjaXBpZW50LCBhbW91bnQsICZxdW90O2FwcHJvdmUmcXVvdDspKQp9Cg=="}}),e._v(" "),a("p",[e._v("At the end, on success, we want to send some tokens. Cosmwasm contracts cannot call other contracts directly, instead, we create a message to represent our request ("),a("code",[e._v("CosmosMsg::Bank(BankMsg::Send)")]),e._v(") and return it as our contract ends. This will be parsed by the "),a("code",[e._v("wasm")]),e._v(" module in go and it will execute and defined actions "),a("em",[e._v("in the same transaction")]),e._v(". This means, that while we will not get access to the return value, we can be ensured that if the send fails (user specified more coins than were in the escrow), all state changes in this contract would be reverted... just as if we returned "),a("code",[e._v("unauthorized")]),e._v(". This is pulled into a helper to make the code clearer:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Zm4gc2VuZF90b2tlbnModG9fYWRkcmVzczogQWRkciwgYW1vdW50OiBWZWMmbHQ7Q29pbiZndDssIGFjdGlvbjogJmFtcDtzdHIpIC0mZ3Q7IFJlc3BvbnNlIHsKICAgIGxldCBhdHRyaWJ1dGVzID0gdmVjIVthdHRyKCZxdW90O2FjdGlvbiZxdW90OywgYWN0aW9uKSwgYXR0cigmcXVvdDt0byZxdW90OywgdG9fYWRkcmVzcy5jbG9uZSgpKV07CgogICAgUmVzcG9uc2UgewogICAgICAgIHN1Ym1lc3NhZ2VzOiB2ZWMhW10sCiAgICAgICAgbWVzc2FnZXM6IHZlYyFbQ29zbW9zTXNnOjpCYW5rKEJhbmtNc2c6OlNlbmQgewogICAgICAgICAgICB0b19hZGRyZXNzOiB0b19hZGRyZXNzLmludG8oKSwKICAgICAgICAgICAgYW1vdW50LAogICAgICAgIH0pXSwKICAgICAgICBkYXRhOiBOb25lLAogICAgICAgIGF0dHJpYnV0ZXMsCiAgICB9Cn0K"}}),e._v(" "),a("p",[e._v("Note that "),a("code",[e._v("Env")]),e._v(" encodes a lot of information from the blockchain, essentially providing the "),a("code",[e._v("Context")]),e._v(" if you are coming from Cosmos SDK. This is validated data and can be trusted to compare any messages against. Refer to "),a("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/blob/v0.10.0/packages/std/src/types.rs#L7-L41",target:"_blank",rel:"noopener noreferrer"}},[e._v("the standard "),a("code",[e._v("cosmwasm")]),e._v(" types"),a("OutboundLink")],1),e._v(" for references to all the available types in the environment.")]),e._v(" "),a("h2",{attrs:{id:"adding-a-new-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-a-new-message"}},[e._v("#")]),e._v(" Adding a New Message")]),e._v(" "),a("p",[e._v("In this example, we will modify this contract to add some more functionality. In particular, let's make a backdoor to the contract. In the form of a "),a("code",[e._v("ExecuteMsg::Steal")]),e._v(" variant that must be signed by some hard coded "),a("code",[e._v("THIEF")]),e._v(" address and will release the entire contract balance to an address included in the message. Simple?")]),e._v(" "),a("p",[e._v("Note that this also demonstrates the need to verify the code behind a contract rather than just rely on raw wasm. Since we have a reproducible compilation step (details below), if I show you code I claim to belong to the contract, you can compile it and compare the hash to the hash stored on the blockchain, to verify that this really is the original rust code. We will be adding tooling to automate this step and make it simpler in the coming months, but for now, this example serves to demonstrate why it is important.")]),e._v(" "),a("h3",{attrs:{id:"adding-the-handler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-the-handler"}},[e._v("#")]),e._v(" Adding the Handler")]),e._v(" "),a("p",[e._v("Open up "),a("code",[e._v("src/msg.rs")]),e._v(" in your "),a("a",{attrs:{href:"./intro#setting-up-your-ide"}},[e._v("editor of choice")]),e._v(" and let's add another variant to the "),a("code",[e._v("ExecuteMsg")]),e._v(" enum, called "),a("code",[e._v("Steal")]),e._v(". Remember, it must have a destination address:")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/learn/hijack-escrow/edit-escrow-hints.html#executemsg"}},[e._v("Need a hint?")])],1),e._v(" "),a("p",[e._v("Now, you can add the message handler. As a quick check, try running "),a("code",[e._v("cargo wasm")]),e._v(" or look for the compile error in your IDE. Remember what I told you about "),a("code",[e._v("match")]),e._v("? Okay, now, add a function to process the "),a("code",[e._v("ExecuteMsg::Steal")]),e._v(" variant. For the top level "),a("code",[e._v("THIEF")]),e._v(", you can use a placeholder address (we will set this to an address you own before deploying).")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/learn/hijack-escrow/edit-escrow-hints.html#adding-handler"}},[e._v("Need a hint?")])],1),e._v(" "),a("p",[e._v("Once you are done, check that it compiles:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"Y2FyZ28gd2FzbQo="}}),e._v(" "),a("h3",{attrs:{id:"writing-a-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-a-test"}},[e._v("#")]),e._v(" Writing a Test")]),e._v(" "),a("p",[e._v("We have a number of tests inside of "),a("code",[e._v("contracts.rs")]),e._v(" that serve as templates, so let's make use of them. You can copy the "),a("code",[e._v("handle_refund")]),e._v(" test and rename it to "),a("code",[e._v("handle_steal")]),e._v(". Remember to include the "),a("code",[e._v("#[test]")]),e._v(" declaration on top. Now, go in and edit it to test that the THIEF can indeed steal the funds, and no one else can. Make sure our backdoor is working properly before we try to use it.")]),e._v(" "),a("p",[e._v("Now, try running "),a("code",[e._v("cargo unit-test")]),e._v(" and see if your code works as planned. If it fails, try "),a("code",[e._v("RUST_BACKTRACE=1 cargo unit-test")]),e._v(" to get a full stack trace. Now, isn't that nicer than trying to test Solidity contracts?")]),e._v(" "),a("p",[a("a",{attrs:{href:"./edit-escrow-hints#test-steal"}},[e._v("See solution here")])])],1)}),[],!1,null,null,null);t.default=s.exports}}]);