(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{676:function(e,o,t){"use strict";t.r(o);var s=t(0),c=Object(s.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"migrating-contracts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#migrating-contracts"}},[e._v("#")]),e._v(" Migrating Contracts")]),e._v(" "),t("p",[e._v("This guide explains what is needed to upgrade contracts when migrating over\nmajor releases of "),t("code",[e._v("cosmwasm")]),e._v(". Note that you can also view the\n"),t("RouterLink",{attrs:{to:"/learn/CHANGELOG.html"}},[e._v("complete CHANGELOG")]),e._v(" to understand the differences.")],1),e._v(" "),t("h2",{attrs:{id:"_0-12-0-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-12-0-13"}},[e._v("#")]),e._v(" 0.12 -> 0.13")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("The minimum Rust supported version for 0.13 is 1.47.0.")]),e._v(" "),t("p",[e._v("Verify your Rust version is >= 1.47.0:")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"",base64:"cnVzdGMgLVYK"}})],1),e._v(" "),t("li",[t("p",[e._v("Update CosmWasm dependencies in Cargo.toml (skip the ones you don't use):")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"",base64:"W2RlcGVuZGVuY2llc10KY29zbXdhc20tc3RkID0gJnF1b3Q7MC4xMy4wJnF1b3Q7CmNvc213YXNtLXN0b3JhZ2UgPSAmcXVvdDswLjEzLjAmcXVvdDsKIyAuLi4KCltkZXYtZGVwZW5kZW5jaWVzXQpjb3Ntd2FzbS1zY2hlbWEgPSAmcXVvdDswLjEzLjAmcXVvdDsKY29zbXdhc20tdm0gPSAmcXVvdDswLjEzLjAmcXVvdDsKIyAuLi4K"}})],1)]),e._v(" "),t("h2",{attrs:{id:"_0-11-0-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-11-0-12"}},[e._v("#")]),e._v(" 0.11 -> 0.12")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Update CosmWasm dependencies in Cargo.toml (skip the ones you don't use):")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"",base64:"W2RlcGVuZGVuY2llc10KY29zbXdhc20tc3RkID0gJnF1b3Q7MC4xMi4wJnF1b3Q7CmNvc213YXNtLXN0b3JhZ2UgPSAmcXVvdDswLjEyLjAmcXVvdDsKIyAuLi4KCltkZXYtZGVwZW5kZW5jaWVzXQpjb3Ntd2FzbS1zY2hlbWEgPSAmcXVvdDswLjEyLjAmcXVvdDsKY29zbXdhc20tdm0gPSAmcXVvdDswLjEyLjAmcXVvdDsKIyAuLi4K"}})],1),e._v(" "),t("li",[t("p",[e._v("In your contract's "),t("code",[e._v(".cargo/config")]),e._v(" remove "),t("code",[e._v("--features backtraces")]),e._v(", which is\nnow available in Rust nightly only:")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"diff",base64:"QEAgLTEsNiArMSw2IEBACiBbYWxpYXNdCiB3YXNtID0gJnF1b3Q7YnVpbGQgLS1yZWxlYXNlIC0tdGFyZ2V0IHdhc20zMi11bmtub3duLXVua25vd24mcXVvdDsKIHdhc20tZGVidWcgPSAmcXVvdDtidWlsZCAtLXRhcmdldCB3YXNtMzItdW5rbm93bi11bmtub3duJnF1b3Q7Ci11bml0LXRlc3QgPSAmcXVvdDt0ZXN0IC0tbGliIC0tZmVhdHVyZXMgYmFja3RyYWNlcyZxdW90OwordW5pdC10ZXN0ID0gJnF1b3Q7dGVzdCAtLWxpYiZxdW90OwogaW50ZWdyYXRpb24tdGVzdCA9ICZxdW90O3Rlc3QgLS10ZXN0IGludGVncmF0aW9uJnF1b3Q7CiBzY2hlbWEgPSAmcXVvdDtydW4gLS1leGFtcGxlIHNjaGVtYSZxdW90Owo="}}),e._v(" "),t("p",[e._v("In order to use backtraces for debugging, run\n"),t("code",[e._v("RUST_BACKTRACE=1 cargo +nightly unit-test --features backtraces")]),e._v(".")])],1),e._v(" "),t("li",[t("p",[e._v("Rename the type "),t("code",[e._v("Extern")]),e._v(" to "),t("code",[e._v("Deps")]),e._v(", and radically simplify the\n"),t("code",[e._v("init")]),e._v("/"),t("code",[e._v("handle")]),e._v("/"),t("code",[e._v("migrate")]),e._v("/"),t("code",[e._v("query")]),e._v(" entrypoints. Rather than\n"),t("code",[e._v("&mut Extern<S, A, Q>")]),e._v(", use "),t("code",[e._v("DepsMut")]),e._v(". And instead of "),t("code",[e._v("&Extern<S, A, Q>")]),e._v(", use\n"),t("code",[e._v("Deps")]),e._v(". If you ever pass eg. "),t("code",[e._v("foo<A: Api>(api: A)")]),e._v(" around, you must now use\ndynamic trait pointers: "),t("code",[e._v("foo(api: &dyn Api)")]),e._v(". Here is the quick search-replace\nguide on how to fix "),t("code",[e._v("contract.rs")]),e._v(":")]),e._v(" "),t("p",[t("em",[e._v("In production (non-test) code:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<S: Storage, A: Api, Q: Querier>")]),e._v(" => ``")]),e._v(" "),t("li",[t("code",[e._v("&mut Extern<S, A, Q>")]),e._v(" => "),t("code",[e._v("DepsMut")])]),e._v(" "),t("li",[t("code",[e._v("&Extern<S, A, Q>")]),e._v(" => "),t("code",[e._v("Deps")])]),e._v(" "),t("li",[t("code",[e._v("&mut deps.storage")]),e._v(" => "),t("code",[e._v("deps.storage")]),e._v(" where passing into "),t("code",[e._v("state.rs")]),e._v(" helpers")]),e._v(" "),t("li",[t("code",[e._v("&deps.storage")]),e._v(" => "),t("code",[e._v("deps.storage")]),e._v(" where passing into "),t("code",[e._v("state.rs")]),e._v(" helpers")])]),e._v(" "),t("p",[e._v("On the top, remove "),t("code",[e._v("use cosmwasm_std::{Api, Extern, Querier, Storage}")]),e._v(". Add\n"),t("code",[e._v("use cosmwasm_std::{Deps, DepsMut}")]),e._v(".")]),e._v(" "),t("p",[t("em",[e._v("In test code only:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("&mut deps,")]),e._v(" => "),t("code",[e._v("deps.as_mut(),")])]),e._v(" "),t("li",[t("code",[e._v("&deps,")]),e._v(" => "),t("code",[e._v("deps.as_ref(),")])])]),e._v(" "),t("p",[e._v("You may have to add "),t("code",[e._v("use cosmwasm_std::{Storage}")]),e._v(" if the compile complains\nabout the trait")]),e._v(" "),t("p",[t("em",[e._v("If you use cosmwasm-storage, in "),t("code",[e._v("state.rs")]),e._v(":")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<S: Storage>")]),e._v(" => ``")]),e._v(" "),t("li",[t("code",[e._v("<S: ReadonlyStorage>")]),e._v(" => ``")]),e._v(" "),t("li",[t("code",[e._v("<S,")]),e._v(" => "),t("code",[e._v("<")])]),e._v(" "),t("li",[t("code",[e._v("&mut S")]),e._v(" => "),t("code",[e._v("&mut dyn Storage")])]),e._v(" "),t("li",[t("code",[e._v("&S")]),e._v(" => "),t("code",[e._v("&dyn Storage")])])])]),e._v(" "),t("li",[t("p",[e._v("If you have any references to "),t("code",[e._v("ReadonlyStorage")]),e._v(" left after the above, please\nreplace them with "),t("code",[e._v("Storage")])])])]),e._v(" "),t("h2",{attrs:{id:"_0-10-0-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-10-0-11"}},[e._v("#")]),e._v(" 0.10 -> 0.11")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Update CosmWasm dependencies in Cargo.toml (skip the ones you don't use):")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"",base64:"W2RlcGVuZGVuY2llc10KY29zbXdhc20tc3RkID0gJnF1b3Q7MC4xMS4wJnF1b3Q7CmNvc213YXNtLXN0b3JhZ2UgPSAmcXVvdDswLjExLjAmcXVvdDsKIyAuLi4KCltkZXYtZGVwZW5kZW5jaWVzXQpjb3Ntd2FzbS1zY2hlbWEgPSAmcXVvdDswLjExLjAmcXVvdDsKY29zbXdhc20tdm0gPSAmcXVvdDswLjExLjAmcXVvdDsKIyAuLi4K"}})],1),e._v(" "),t("li",[t("p",[e._v("Contracts now support any custom error type "),t("code",[e._v("E: ToString + From<StdError>")]),e._v(".\nPreviously this has been "),t("code",[e._v("StdError")]),e._v(", which you can still use. However, you can\nnow create a much more structured error experience for your unit tests that\nhandels exactly the error cases of your contract. In order to get a convenient\nimplementation for "),t("code",[e._v("ToString")]),e._v(" and "),t("code",[e._v("From<StdError>")]),e._v(", we use the crate\n"),t("a",{attrs:{href:"https://crates.io/crates/thiserror",target:"_blank",rel:"noopener noreferrer"}},[e._v("thiserror"),t("OutboundLink")],1),e._v(", which needs to be added to\nthe contracts dependencies in "),t("code",[e._v("Cargo.toml")]),e._v(". To create the custom error, create\nan error module "),t("code",[e._v("src/errors.rs")]),e._v(" as follows:")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"dXNlIGNvc213YXNtX3N0ZDo6e0Nhbm9uaWNhbEFkZHIsIFN0ZEVycm9yfTsKdXNlIHRoaXNlcnJvcjo6RXJyb3I7CgovLyB0aGlzZXJyb3IgaW1wbGVtZW50cyBEaXNwbGF5IGFuZCBUb1N0cmluZyBpZiB5b3UKLy8gc2V0IHRoZSBgI1tlcnJvcigmcXVvdDvigKYmcXVvdDspXWAgYXR0cmlidXRlIGZvciBhbGwgY2FzZXMKI1tkZXJpdmUoRXJyb3IsIERlYnVnKV0KcHViIGVudW0gTXlDdXN0b21FcnJvciB7CiAgICAjW2Vycm9yKCZxdW90O3swfSZxdW90OyldCiAgICAvLyBsZXQgdGhpc2Vycm9yIGltcGxlbWVudCBGcm9tJmx0O1N0ZEVycm9yJmd0OyBmb3IgeW91CiAgICBTdGQoI1tmcm9tXSBTdGRFcnJvciksCiAgICAvLyB0aGlzIGlzIHdoYXRldmVyIHdlIHdhbnQKICAgICNbZXJyb3IoJnF1b3Q7UGVybWlzc2lvbiBkZW5pZWQ6IHRoZSBzZW5kZXIgaXMgbm90IHRoZSBjdXJyZW50IG93bmVyJnF1b3Q7KV0KICAgIE5vdEN1cnJlbnRPd25lciB7CiAgICAgICAgZXhwZWN0ZWQ6IENhbm9uaWNhbEFkZHIsCiAgICAgICAgYWN0dWFsOiBDYW5vbmljYWxBZGRyLAogICAgfSwKICAgICNbZXJyb3IoJnF1b3Q7TWVzc2FnZXMgZW1wdHkuIE11c3QgcmVmbGVjdCBhdCBsZWFzdCBvbmUgbWVzc2FnZSZxdW90OyldCiAgICBNZXNzYWdlc0VtcHR5LAp9Cg=="}}),e._v(" "),t("p",[e._v("Then add "),t("code",[e._v("mod errors;")]),e._v(" to "),t("code",[e._v("src/lib.rs")]),e._v(" and "),t("code",[e._v("use crate::errors::MyCustomError;")]),e._v("\nto "),t("code",[e._v("src/contract.rs")]),e._v(". Now adapt the return types as follows:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("fn init")]),e._v(": "),t("code",[e._v("Result<InitResponse, MyCustomError>")]),e._v(",")]),e._v(" "),t("li",[t("code",[e._v("fn migrate")]),e._v(" (if you have it): "),t("code",[e._v("Result<MigrateResponse, MyCustomError>")]),e._v(",")]),e._v(" "),t("li",[t("code",[e._v("fn handle")]),e._v(": "),t("code",[e._v("Result<HandleResponse, MyCustomError>")]),e._v(",")]),e._v(" "),t("li",[t("code",[e._v("fn query")]),e._v(": "),t("code",[e._v("Result<Binary, MyCustomError>")]),e._v(".")])]),e._v(" "),t("p",[e._v("If one of your funtions does not use the custom error, you can continue to use\n"),t("code",[e._v("StdError")]),e._v(" as before. I.e. you can have "),t("code",[e._v("handle")]),e._v(" returning\n"),t("code",[e._v("Result<HandleResponse, MyCustomError>")]),e._v(" and "),t("code",[e._v("query")]),e._v(" returning\n"),t("code",[e._v("StdResult<Binary>")]),e._v(".")]),e._v(" "),t("p",[e._v("You can have a top-hevel "),t("code",[e._v("init")]),e._v("/"),t("code",[e._v("migrate")]),e._v("/"),t("code",[e._v("handle")]),e._v("/"),t("code",[e._v("query")]),e._v(" that returns a\ncustom error but some of its implementations only return errors from the\nstandard library ("),t("code",[e._v("StdResult<HandleResponse>")]),e._v(" aka.\n"),t("code",[e._v("Result<HandleResponse, StdError>")]),e._v("). Then use "),t("code",[e._v("Ok(std_result?)")]),e._v(" to convert\nbetween the result types. E.g.")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"cHViIGZuIGhhbmRsZSZsdDtTOiBTdG9yYWdlLCBBOiBBcGksIFE6IFF1ZXJpZXImZ3Q7KAogICAgZGVwczogJmFtcDttdXQgRXh0ZXJuJmx0O1MsIEEsIFEmZ3Q7LAogICAgZW52OiBFbnYsCiAgICBtc2c6IEhhbmRsZU1zZywKKSAtJmd0OyBSZXN1bHQmbHQ7SGFuZGxlUmVzcG9uc2UsIFN0YWtpbmdFcnJvciZndDsgewogICAgbWF0Y2ggbXNnIHsKICAgICAgICAvLyBjb252ZXJzaW9uIHRvIFJlc3VsdCZsdDtIYW5kbGVSZXNwb25zZSwgU3Rha2luZ0Vycm9yJmd0OwogICAgICAgIEhhbmRsZU1zZzo6Qm9uZCB7fSA9Jmd0OyBPayhib25kKGRlcHMsIGVudik/KSwKICAgICAgICAvLyB0aGlzIGFscmVhZHkgcmV0dXJucyBSZXN1bHQmbHQ7SGFuZGxlUmVzcG9uc2UsIFN0YWtpbmdFcnJvciZndDsKICAgICAgICBIYW5kbGVNc2c6Ol9Cb25kQWxsVG9rZW5zIHt9ID0mZ3Q7IF9ib25kX2FsbF90b2tlbnMoZGVwcywgZW52KSwKICAgIH0KfQo="}}),e._v(" "),t("p",[e._v("or")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"cHViIGZuIGluaXQmbHQ7UzogU3RvcmFnZSwgQTogQXBpLCBROiBRdWVyaWVyJmd0OygKICAgIGRlcHM6ICZhbXA7bXV0IEV4dGVybiZsdDtTLCBBLCBRJmd0OywKICAgIGVudjogRW52LAogICAgbXNnOiBJbml0TXNnLAopIC0mZ3Q7IFJlc3VsdCZsdDtJbml0UmVzcG9uc2UsIEhhY2tFcnJvciZndDsgewogICAgLy8g4oCmCgogICAgbGV0IG11dCBjdHggPSBDb250ZXh0OjpuZXcoKTsKICAgIGN0eC5hZGRfYXR0cmlidXRlKCZxdW90O0xldCB0aGUmcXVvdDssICZxdW90O2hhY2tpbmcgYmVnaW4mcXVvdDspOwogICAgT2soY3R4LnRyeV9pbnRvKCk/KQp9Cg=="}}),e._v(" "),t("p",[e._v("Once you got familiar with the concept, you can create different error types\nfor each of the contract's functions.")]),e._v(" "),t("p",[e._v("You can also try a different error library than\n"),t("a",{attrs:{href:"https://crates.io/crates/thiserror",target:"_blank",rel:"noopener noreferrer"}},[e._v("thiserror"),t("OutboundLink")],1),e._v(". The\n"),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/tree/master/contracts/staking",target:"_blank",rel:"noopener noreferrer"}},[e._v("staking development contract"),t("OutboundLink")],1),e._v("\nshows how this would look like using "),t("a",{attrs:{href:"https://crates.io/crates/snafu",target:"_blank",rel:"noopener noreferrer"}},[e._v("snafu"),t("OutboundLink")],1),e._v(".")])],1),e._v(" "),t("li",[t("p",[e._v("Change order of arguments such that "),t("code",[e._v("storage")]),e._v(" is always first followed by\nnamespace in "),t("code",[e._v("Bucket::new")]),e._v(", "),t("code",[e._v("Bucket::multilevel")]),e._v(", "),t("code",[e._v("ReadonlyBucket::new")]),e._v(",\n"),t("code",[e._v("ReadonlyBucket::multilevel")]),e._v(", "),t("code",[e._v("PrefixedStorage::new")]),e._v(",\n"),t("code",[e._v("PrefixedStorage::multilevel")]),e._v(", "),t("code",[e._v("ReadonlyPrefixedStorage::new")]),e._v(",\n"),t("code",[e._v("ReadonlyPrefixedStorage::multilevel")]),e._v(", "),t("code",[e._v("bucket")]),e._v(", "),t("code",[e._v("bucket_read")]),e._v(", "),t("code",[e._v("prefixed")]),e._v(" and\n"),t("code",[e._v("prefixed_read")]),e._v(".")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCmxldCBtdXQgYnVja2V0ID0gYnVja2V0OjombHQ7XywgRGF0YSZndDsoYiZxdW90O2RhdGEmcXVvdDssICZhbXA7bXV0IHN0b3JlKTsKCi8vIGFmdGVyCmxldCBtdXQgYnVja2V0ID0gYnVja2V0OjombHQ7XywgRGF0YSZndDsoJmFtcDttdXQgc3RvcmUsIGImcXVvdDtkYXRhJnF1b3Q7KTsK"}})],1),e._v(" "),t("li",[t("p",[e._v("Rename "),t("code",[e._v("InitResponse::log")]),e._v(", "),t("code",[e._v("MigrateResponse::log")]),e._v(" and "),t("code",[e._v("HandleResponse::log")]),e._v("\nto "),t("code",[e._v("InitResponse::attributes")]),e._v(", "),t("code",[e._v("MigrateResponse::attributes")]),e._v(" and\n"),t("code",[e._v("HandleResponse::attributes")]),e._v(". Replace calls to "),t("code",[e._v("log")]),e._v(" with "),t("code",[e._v("attr")]),e._v(":")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCk9rKEhhbmRsZVJlc3BvbnNlIHsKICBsb2c6IHZlYyFbbG9nKCZxdW90O2FjdGlvbiZxdW90OywgJnF1b3Q7Y2hhbmdlX293bmVyJnF1b3Q7KSwgbG9nKCZxdW90O293bmVyJnF1b3Q7LCBvd25lcildLAogIC4uSGFuZGxlUmVzcG9uc2U6OmRlZmF1bHQoKQp9KQoKLy8gYWZ0ZXIKT2soSGFuZGxlUmVzcG9uc2UgewogIGF0dHJpYnV0ZXM6IHZlYyFbYXR0cigmcXVvdDthY3Rpb24mcXVvdDssICZxdW90O2NoYW5nZV9vd25lciZxdW90OyksIGF0dHIoJnF1b3Q7b3duZXImcXVvdDssIG93bmVyKV0sCiAgLi5IYW5kbGVSZXNwb25zZTo6ZGVmYXVsdCgpCn0pCg=="}})],1),e._v(" "),t("li",[t("p",[e._v("Rename "),t("code",[e._v("Context::add_log")]),e._v(" to "),t("code",[e._v("Context::add_attribute")]),e._v(":")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCmxldCBtdXQgY3R4ID0gQ29udGV4dDo6bmV3KCk7CmN0eC5hZGRfbG9nKCZxdW90O2FjdGlvbiZxdW90OywgJnF1b3Q7cmVsZWFzZSZxdW90Oyk7CmN0eC5hZGRfbG9nKCZxdW90O2Rlc3RpbmF0aW9uJnF1b3Q7LCAmYW1wO3RvX2FkZHIpOwoKLy8gYWZ0ZXIKbGV0IG11dCBjdHggPSBDb250ZXh0OjpuZXcoKTsKY3R4LmFkZF9hdHRyaWJ1dGUoJnF1b3Q7YWN0aW9uJnF1b3Q7LCAmcXVvdDtyZWxlYXNlJnF1b3Q7KTsKY3R4LmFkZF9hdHRyaWJ1dGUoJnF1b3Q7ZGVzdGluYXRpb24mcXVvdDssICZhbXA7dG9fYWRkcik7Cg=="}})],1),e._v(" "),t("li",[t("p",[e._v("Add result type to "),t("code",[e._v("Bucket::update")]),e._v(" and "),t("code",[e._v("Singleton::update")]),e._v(":")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCmJ1Y2tldC51cGRhdGUoYiZxdW90O21hcmlhJnF1b3Q7LCB8bWF5ZDogT3B0aW9uJmx0O0RhdGEmZ3Q7fCB7CiAgbGV0IG11dCBkID0gbWF5ZC5va19vcihTdGRFcnJvcjo6bm90X2ZvdW5kKCZxdW90O0RhdGEmcXVvdDspKT87CiAgb2xkX2FnZSA9IGQuYWdlOwogIGQuYWdlICs9IDE7CiAgT2soZCkKfSkKCi8vIGFmdGVyCmJ1Y2tldC51cGRhdGUoYiZxdW90O21hcmlhJnF1b3Q7LCB8bWF5ZDogT3B0aW9uJmx0O0RhdGEmZ3Q7fCAtJmd0OyBTdGRSZXN1bHQmbHQ7XyZndDsgewogIGxldCBtdXQgZCA9IG1heWQub2tfb3IoU3RkRXJyb3I6Om5vdF9mb3VuZCgmcXVvdDtEYXRhJnF1b3Q7KSk/OwogIG9sZF9hZ2UgPSBkLmFnZTsKICBkLmFnZSArPSAxOwogIE9rKGQpCn0pCg=="}})],1),e._v(" "),t("li",[t("p",[e._v("Remove all "),t("code",[e._v("canonical_length")]),e._v(" arguments from mock APIs in tests:")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCmxldCBtdXQgZGVwcyA9IG1vY2tfZGVwZW5kZW5jaWVzKDIwLCAmYW1wO1tdKTsKbGV0IG11dCBkZXBzID0gbW9ja19kZXBlbmRlbmNpZXMoMjAsICZhbXA7Y29pbnMoMTIzNDU2LCAmcXVvdDtnb2xkJnF1b3Q7KSk7CmxldCBkZXBzID0gbW9ja19kZXBlbmRlbmNpZXNfd2l0aF9iYWxhbmNlcygyMCwgJmFtcDtbKCZhbXA7cmljaF9hZGRyLCAmYW1wO3JpY2hfYmFsYW5jZSldKTsKbGV0IGFwaSA9IE1vY2tBcGk6Om5ldygyMCk7CgovLyBhZnRlcgpsZXQgbXV0IGRlcHMgPSBtb2NrX2RlcGVuZGVuY2llcygmYW1wO1tdKTsKbGV0IG11dCBkZXBzID0gbW9ja19kZXBlbmRlbmNpZXMoJmFtcDtjb2lucygxMjM0NTYsICZxdW90O2dvbGQmcXVvdDspKTsKbGV0IGRlcHMgPSBtb2NrX2RlcGVuZGVuY2llc193aXRoX2JhbGFuY2VzKCZhbXA7WygmYW1wO3JpY2hfYWRkciwgJmFtcDtyaWNoX2JhbGFuY2UpXSk7CmxldCBhcGkgPSBNb2NrQXBpOjpkZWZhdWx0KCk7Cg=="}})],1),e._v(" "),t("li",[t("p",[e._v("Add "),t("code",[e._v("MessageInfo")]),e._v(" as separate arg after "),t("code",[e._v("Env")]),e._v(" for "),t("code",[e._v("init")]),e._v(", "),t("code",[e._v("handle")]),e._v(", "),t("code",[e._v("migrate")]),e._v(".\nAdd "),t("code",[e._v("Env")]),e._v(" arg to "),t("code",[e._v("query")]),e._v(". Use "),t("code",[e._v("info.sender")]),e._v(" instead of "),t("code",[e._v("env.message.sender")]),e._v("\nand "),t("code",[e._v("info.sent_funds")]),e._v(" rather than "),t("code",[e._v("env.message.sent_funds")]),e._v(". Just changing the\nfunction signatures of the 3-4 export functions should be enough, then the\ncompiler will warn you anywhere you use "),t("code",[e._v("env.message")])]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCnB1YiBmbiBpbml0Jmx0O1M6IFN0b3JhZ2UsIEE6IEFwaSwgUTogUXVlcmllciZndDsoCiAgICBkZXBzOiAmYW1wO211dCBFeHRlcm4mbHQ7UywgQSwgUSZndDssCiAgICBlbnY6IEVudiwKICAgIG1zZzogSW5pdE1zZywKKSB7CiAgICBkZXBzLnN0b3JhZ2Uuc2V0KAogICAgICAgIENPTkZJR19LRVksCiAgICAgICAgJmFtcDt0b192ZWMoJmFtcDtTdGF0ZSB7CiAgICAgICAgICAgIHZlcmlmaWVyOiBkZXBzLmFwaS5jYW5vbmljYWxfYWRkcmVzcygmYW1wO21zZy52ZXJpZmllcik/LAogICAgICAgICAgICBiZW5lZmljaWFyeTogZGVwcy5hcGkuY2Fub25pY2FsX2FkZHJlc3MoJmFtcDttc2cuYmVuZWZpY2lhcnkpPywKICAgICAgICAgICAgZnVuZGVyOiBkZXBzLmFwaS5jYW5vbmljYWxfYWRkcmVzcygmYW1wO2Vudi5tZXNzYWdlLnNlbmRlcik/LAogICAgICAgIH0pPywKICAgICk7Cn0KCi8vIGFmdGVyCnB1YiBmbiBpbml0Jmx0O1M6IFN0b3JhZ2UsIEE6IEFwaSwgUTogUXVlcmllciZndDsoCiAgICBkZXBzOiAmYW1wO211dCBFeHRlcm4mbHQ7UywgQSwgUSZndDssCiAgICBfZW52OiBFbnYsCiAgICBpbmZvOiBNZXNzYWdlSW5mbywKICAgIG1zZzogSW5pdE1zZywKKSB7CiAgICBkZXBzLnN0b3JhZ2Uuc2V0KAogICAgICAgIENPTkZJR19LRVksCiAgICAgICAgJmFtcDt0b192ZWMoJmFtcDtTdGF0ZSB7CiAgICAgICAgICAgIHZlcmlmaWVyOiBkZXBzLmFwaS5jYW5vbmljYWxfYWRkcmVzcygmYW1wO21zZy52ZXJpZmllcik/LAogICAgICAgICAgICBiZW5lZmljaWFyeTogZGVwcy5hcGkuY2Fub25pY2FsX2FkZHJlc3MoJmFtcDttc2cuYmVuZWZpY2lhcnkpPywKICAgICAgICAgICAgZnVuZGVyOiBkZXBzLmFwaS5jYW5vbmljYWxfYWRkcmVzcygmYW1wO2luZm8uc2VuZGVyKT8sCiAgICAgICAgfSk/LAogICAgKTsKfQo="}})],1),e._v(" "),t("li",[t("p",[e._v("Test code now has "),t("code",[e._v("mock_info")]),e._v(" which takes the same args "),t("code",[e._v("mock_env")]),e._v(" used to.\nYou can just pass "),t("code",[e._v("mock_env()")]),e._v(" directly into the function calls unless you\nneed to change height/time.")])]),e._v(" "),t("li",[t("p",[e._v("One more object to pass in for both unit and integration tests. To do this\nquickly, I just highlight all copies of "),t("code",[e._v("env")]),e._v(" and replace them with "),t("code",[e._v("info")]),e._v("\n(using Ctrl+D in VSCode or Alt+J in IntelliJ). Then I select all "),t("code",[e._v("deps, info")]),e._v("\nsections and replace that with "),t("code",[e._v("deps, mock_env(), info")]),e._v(". This fixes up all\n"),t("code",[e._v("init")]),e._v(" and "),t("code",[e._v("handle")]),e._v(" calls, then just add an extra "),t("code",[e._v("mock_env()")]),e._v(" to the query\ncalls.")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlOiB1bml0IHRlc3QKbGV0IGVudiA9IG1vY2tfZW52KGNyZWF0b3IuYXNfc3RyKCksICZhbXA7W10pOwpsZXQgcmVzID0gaW5pdCgmYW1wO211dCBkZXBzLCBlbnYsIG1zZykudW53cmFwKCk7CgpsZXQgcXVlcnlfcmVzcG9uc2UgPSBxdWVyeSgmYW1wO2RlcHMsIFF1ZXJ5TXNnOjpWZXJpZmllciB7fSkudW53cmFwKCk7CgovLyBhZnRlcjogdW5pdCB0ZXN0CmxldCBpbmZvID0gbW9ja19pbmZvKGNyZWF0b3IuYXNfc3RyKCksICZhbXA7W10pOwpsZXQgcmVzID0gaW5pdCgmYW1wO211dCBkZXBzLCBtb2NrX2VudigpLCBpbmZvLCBtc2cpLnVud3JhcCgpOwoKbGV0IHF1ZXJ5X3Jlc3BvbnNlID0gcXVlcnkoJmFtcDtkZXBzLCBtb2NrX2VudigpLCBRdWVyeU1zZzo6VmVyaWZpZXIge30pLnVud3JhcCgpOwoKLy8gYmVmb3JlOiBpbnRlZ3JhdGlvbiB0ZXN0CmxldCBlbnYgPSBtb2NrX2VudigmcXVvdDtjcmVhdG9yJnF1b3Q7LCAmYW1wO2NvaW5zKDEwMDAsICZxdW90O2VhcnRoJnF1b3Q7KSk7CmxldCByZXM6IEluaXRSZXNwb25zZSA9IGluaXQoJmFtcDttdXQgZGVwcywgZW52LCBtc2cpLnVud3JhcCgpOwoKbGV0IHF1ZXJ5X3Jlc3BvbnNlID0gcXVlcnkoJmFtcDttdXQgZGVwcywgUXVlcnlNc2c6OlZlcmlmaWVyIHt9KS51bndyYXAoKTsKCi8vIGFmdGVyOiBpbnRlZ3JhdGlvbiB0ZXN0CmxldCBpbmZvID0gbW9ja19pbmZvKCZxdW90O2NyZWF0b3ImcXVvdDssICZhbXA7Y29pbnMoMTAwMCwgJnF1b3Q7ZWFydGgmcXVvdDspKTsKbGV0IHJlczogSW5pdFJlc3BvbnNlID0gaW5pdCgmYW1wO211dCBkZXBzLCBtb2NrX2VudigpLCBpbmZvLCBtc2cpLnVud3JhcCgpOwoKbGV0IHF1ZXJ5X3Jlc3BvbnNlID0gcXVlcnkoJmFtcDttdXQgZGVwcywgbW9ja19lbnYoKSwgUXVlcnlNc2c6OlZlcmlmaWVyIHt9KS51bndyYXAoKTsK"}})],1)]),e._v(" "),t("h2",{attrs:{id:"_0-9-0-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-9-0-10"}},[e._v("#")]),e._v(" 0.9 -> 0.10")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Update CosmWasm dependencies in Cargo.toml (skip the ones you don't use):")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"",base64:"W2RlcGVuZGVuY2llc10KY29zbXdhc20tc3RkID0gJnF1b3Q7MC4xMC4wJnF1b3Q7CmNvc213YXNtLXN0b3JhZ2UgPSAmcXVvdDswLjEwLjAmcXVvdDsKIyAuLi4KCltkZXYtZGVwZW5kZW5jaWVzXQpjb3Ntd2FzbS1zY2hlbWEgPSAmcXVvdDswLjEwLjAmcXVvdDsKY29zbXdhc20tdm0gPSAmcXVvdDswLjEwLjAmcXVvdDsKIyAuLi4K"}})],1)]),e._v(" "),t("p",[e._v("Integration tests:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Calls to "),t("code",[e._v("Api::human_address")]),e._v(" and "),t("code",[e._v("Api::canonical_address")]),e._v(" now return a pair\nof result and gas information. Change")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCnZlcmlmaWVyOiBkZXBzLmFwaS5jYW5vbmljYWxfYWRkcmVzcygmYW1wO3ZlcmlmaWVyKS51bndyYXAoKSwKCi8vIGFmdGVyCnZlcmlmaWVyOiBkZXBzLmFwaS5jYW5vbmljYWxfYWRkcmVzcygmYW1wO3ZlcmlmaWVyKS4wLnVud3JhcCgpLAo="}}),e._v(" "),t("p",[e._v("The same applies for all calls of "),t("code",[e._v("Querier")]),e._v(" and "),t("code",[e._v("Storage")]),e._v(".")])],1)]),e._v(" "),t("p",[e._v("All Tests:")]),e._v(" "),t("p",[e._v("All usages of "),t("code",[e._v("mock_env")]),e._v(" will have to remove the first argument (no need of\nAPI).")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlCmxldCBlbnYgPSBtb2NrX2VudigmYW1wO2RlcHMuYXBpLCAmcXVvdDtjcmVhdG9yJnF1b3Q7LCAmYW1wO2NvaW5zKDEwMDAsICZxdW90O2VhcnRoJnF1b3Q7KSk7CgovLyBhZnRlcgpsZXQgZW52ID0gbW9ja19lbnYoJnF1b3Q7Y3JlYXRvciZxdW90OywgJmFtcDtjb2lucygxMDAwLCAmcXVvdDtlYXJ0aCZxdW90OykpOwo="}}),e._v(" "),t("p",[e._v("Contracts:")]),e._v(" "),t("ul",[t("li",[e._v("All code that uses "),t("code",[e._v("message.sender")]),e._v(" or "),t("code",[e._v("contract.address")]),e._v(" should deal with\n"),t("code",[e._v("HumanAddr")]),e._v(" not "),t("code",[e._v("CanonicalAddr")]),e._v(". Many times this means you can remove a\nconversion step.")])]),e._v(" "),t("h2",{attrs:{id:"_0-8-0-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-8-0-9"}},[e._v("#")]),e._v(" 0.8 -> 0.9")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Update CosmWasm dependencies in Cargo.toml (skip the ones you don't use):")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"",base64:"W2RlcGVuZGVuY2llc10KY29zbXdhc20tc3RkID0gJnF1b3Q7MC45LjAmcXVvdDsKY29zbXdhc20tc3RvcmFnZSA9ICZxdW90OzAuOS4wJnF1b3Q7CiMgLi4uCgpbZGV2LWRlcGVuZGVuY2llc10KY29zbXdhc20tc2NoZW1hID0gJnF1b3Q7MC45LjAmcXVvdDsKY29zbXdhc20tdm0gPSAmcXVvdDswLjkuMCZxdW90OwojIC4uLgo="}})],1)]),e._v(" "),t("p",[t("code",[e._v("lib.rs")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("The C export boilerplate can now be reduced to the following code (see e.g. in\n"),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/blob/0a5b3e8121/contracts/hackatom/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("hackatom/src/lib.rs"),t("OutboundLink")],1),e._v("):")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"bW9kIGNvbnRyYWN0OyAvLyBjb250YWlucyBpbml0LCBoYW5kbGUsIHF1ZXJ5Ci8vIG1heWJlIGFkZGl0aW9uYWwgbW9kdWxlcyBoZXJlCgojW2NmZyh0YXJnZXRfYXJjaCA9ICZxdW90O3dhc20zMiZxdW90OyldCmNvc213YXNtX3N0ZDo6Y3JlYXRlX2VudHJ5X3BvaW50cyEoY29udHJhY3QpOwo="}})],1)]),e._v(" "),t("p",[e._v("Contract code and uni tests:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cosmwasm_storage::get_with_prefix")]),e._v(", "),t("code",[e._v("cosmwasm_storage::set_with_prefix")]),e._v(",\n"),t("code",[e._v("cosmwasm_storage::RepLog::commit")]),e._v(", "),t("code",[e._v("cosmwasm_std::ReadonlyStorage::get")]),e._v(",\n"),t("code",[e._v("cosmwasm_std::ReadonlyStorage::range")]),e._v(", "),t("code",[e._v("cosmwasm_std::Storage::set")]),e._v(" and\n"),t("code",[e._v("cosmwasm_std::Storage::remove")]),e._v(" now return the value directly that was wrapped\nin a result before.")]),e._v(" "),t("li",[e._v("Error creator functions are now in type itself, e.g.\n"),t("code",[e._v("StdError::invalid_base64")]),e._v(" instead of "),t("code",[e._v("invalid_base64")]),e._v(". The free functions are\ndeprecated and will be removed before 1.0.")]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("InitResponse.data")]),e._v(" in "),t("code",[e._v("init")]),e._v(". Before 0.9 this was not stored to chain\nbut ignored.")]),e._v(" "),t("li",[e._v("Use "),t("code",[e._v("cosmwasm_storage::transactional")]),e._v(" instead of the removed\n"),t("code",[e._v("cosmwasm_storage::transactional_deps")]),e._v(".")]),e._v(" "),t("li",[e._v("Replace "),t("code",[e._v("cosmwasm_std::Never")]),e._v(" with "),t("code",[e._v("cosmwasm_std::Empty")]),e._v(".")])]),e._v(" "),t("p",[e._v("Integration tests:")]),e._v(" "),t("ul",[t("li",[e._v("Replace "),t("code",[e._v("cosmwasm_vm::ReadonlyStorage")]),e._v(" with "),t("code",[e._v("cosmwasm_vm::Storage")]),e._v(", which now\ncontains all backend storage methods.")]),e._v(" "),t("li",[e._v("Storage getters (and iterators) now return a result of\n"),t("code",[e._v("(Option<Vec<u8>>, u64)")]),e._v(", where the first component is the element and the\nsecond one is the gas cost. Thus in a few places "),t("code",[e._v(".0")]),e._v(" must be added to access\nthe element.")])]),e._v(" "),t("h2",{attrs:{id:"_0-7-2-0-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-7-2-0-8"}},[e._v("#")]),e._v(" 0.7.2 -> 0.8")]),e._v(" "),t("h3",{attrs:{id:"update-wasm-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#update-wasm-code"}},[e._v("#")]),e._v(" Update wasm code")]),e._v(" "),t("p",[t("code",[e._v("Cargo.toml")]),e._v(" dependencies:")]),e._v(" "),t("ul",[t("li",[e._v("Update to "),t("code",[e._v('schemars = "0.7"')])]),e._v(" "),t("li",[e._v("Replace "),t("code",[e._v('cosmwasm = "0.7"')]),e._v(" with "),t("code",[e._v('cosmwasm-std = "0.8"')])]),e._v(" "),t("li",[e._v("Replace "),t("code",[e._v('cosmwasm-vm = "0.7"')]),e._v(" with "),t("code",[e._v('cosmwasm-vm = "0.8"')])]),e._v(" "),t("li",[e._v("Replace "),t("code",[e._v('cw-storage = "0.2"')]),e._v(" with "),t("code",[e._v('cosmwasm-storage = "0.8"')])]),e._v(" "),t("li",[e._v("Remove explicit "),t("code",[e._v("snafu")]),e._v(" dependency. "),t("code",[e._v("cosmwasm_std")]),e._v(" still uses it internally\nbut doesn't expose snafu specifics anymore. See more details on errors below.")])]),e._v(" "),t("p",[e._v("(Note: until release of "),t("code",[e._v("0.8")]),e._v(", you need to use git references for all\n"),t("code",[e._v("cosmwasm_*")]),e._v(" packages)")]),e._v(" "),t("p",[t("code",[e._v("Cargo.toml")]),e._v(" features:")]),e._v(" "),t("ul",[t("li",[e._v("Replace "),t("code",[e._v('"cosmwasm/backtraces"')]),e._v(" with "),t("code",[e._v('"cosmwasm-std/backtraces"')])])]),e._v(" "),t("p",[e._v("Imports:")]),e._v(" "),t("ul",[t("li",[e._v("Replace all "),t("code",[e._v("use cosmwasm::X::Y")]),e._v(" with "),t("code",[e._v("use cosmwasm_std::Y")]),e._v(", except for mock")]),e._v(" "),t("li",[e._v("Replace all "),t("code",[e._v("use cosmwasm::mock::Y")]),e._v(" with "),t("code",[e._v("use cosmwasm_std::testing::Y")]),e._v(". This\nshould only be used in test code.")]),e._v(" "),t("li",[e._v("Replace "),t("code",[e._v("cw_storage:X")]),e._v(" with "),t("code",[e._v("cosmwasm_storage::X")])]),e._v(" "),t("li",[e._v("Replace "),t("code",[e._v("cosmwasm_std::Response")]),e._v(" with "),t("code",[e._v("cosmwasm_std::HandleResponse")]),e._v(" and\n"),t("code",[e._v("cosmwasm_std::InitResponse")]),e._v(" (different type for each call)")])]),e._v(" "),t("p",[t("code",[e._v("src/lib.rs")]),e._v(":")]),e._v(" "),t("p",[e._v("This has been re-written, but is generic boilerplate and should be (almost) the\nsame in all contracts:")]),e._v(" "),t("ul",[t("li",[e._v("copy the new version from\n"),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/blob/master/contracts/queue/src/lib.rs",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("contracts/queue")]),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("pub mod XYZ")]),e._v(" directives for any modules you use besides "),t("code",[e._v("contract")])])]),e._v(" "),t("p",[e._v("Contract Code:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Add query to extern:")]),e._v(" "),t("ul",[t("li",[e._v("Before: "),t("code",[e._v("my_func<S: Storage, A: Api>(deps: &Extern<S, A>, ...")])]),e._v(" "),t("li",[e._v("After: "),t("code",[e._v("my_func<S: Storage, A: Api, Q: Querier>(deps: &Extern<S, A, Q>, ...")])]),e._v(" "),t("li",[e._v("Remember to add "),t("code",[e._v("use cosmwasm_std::Querier;")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("query")]),e._v(" now returns "),t("code",[e._v("StdResult<Binary>")]),e._v(" instead of "),t("code",[e._v("Result<Vec<u8>>")])]),e._v(" "),t("ul",[t("li",[e._v("You can also replace "),t("code",[e._v("to_vec(...)")]),e._v(" with "),t("code",[e._v("to_binary(...)")])])])]),e._v(" "),t("li",[t("p",[e._v("No "),t("code",[e._v(".context(...)")]),e._v(" is required after "),t("code",[e._v("from_slice")]),e._v(" and "),t("code",[e._v("to_vec")]),e._v(", they return\nproper "),t("code",[e._v("cosmwasm_std::Error")]),e._v(" variants on errors.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("env.message.signer")]),e._v(" becomes "),t("code",[e._v("env.message.sender")]),e._v(".")])]),e._v(" "),t("li",[t("p",[e._v("If you used "),t("code",[e._v("env.contract.balance")]),e._v(", you must now use the querier. The\nfollowing code block should work:")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlIChpbiBlbnYpCmxldCBmb28gPSBlbnYuY29udHJhY3QuYmFsYW5jZTsKCi8vIGFmdGVyIChxdWVyeSBteSBiYWxhbmNlKQpsZXQgY29udHJhY3RfYWRkciA9IGRlcHMuYXBpLmh1bWFuX2FkZHJlc3MoJmFtcDtlbnYuY29udHJhY3QuYWRkcmVzcyk/OwpsZXQgYmFsYW5jZSA9IGRlcHMucXVlcmllci5xdWVyeV9hbGxfYmFsYW5jZXMoJmFtcDtjb250cmFjdF9hZGRyKT87CmxldCBmb28gPSBiYWxhbmNlLmFtb3VudDsK"}})],1),e._v(" "),t("li",[t("p",[e._v("Update the "),t("code",[e._v("CosmosMsg")]),e._v(" enums used:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("CosmosMsg::Send{}")]),e._v(" => "),t("code",[e._v("CosmosMsg::Bank(BankMsg::Send{})")])]),e._v(" "),t("li",[t("code",[e._v("CosmosMsg::Opaque{ data }")]),e._v(" => "),t("code",[e._v("CosmosMsg::Native{ msg }")])]),e._v(" "),t("li",[t("code",[e._v("CosmosMsg::Contract")]),e._v(" => "),t("code",[e._v("CosmosMsg::Wasm(WasmMsg::Execute{})")])])])]),e._v(" "),t("li",[t("p",[e._v("Complete overhaul of "),t("code",[e._v("cosmwasm::Error")]),e._v(" into "),t("code",[e._v("cosmwasm_std::StdError")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Auto generated snafu error constructor structs like "),t("code",[e._v("NotFound")]),e._v("/"),t("code",[e._v("ParseErr")]),e._v("/…\nhave been privatized in favour of error generation helpers like\n"),t("code",[e._v("not_found")]),e._v("/"),t("code",[e._v("parse_err")]),e._v("/…")]),e._v(" "),t("li",[e._v("All error generator functions now return errors instead of results, such\nthat e.g. "),t("code",[e._v("return unauthorized();")]),e._v(" becomes "),t("code",[e._v("return Err(unauthorized());")])]),e._v(" "),t("li",[e._v("Error cases don't contain "),t("code",[e._v("source")]),e._v(" fields anymore. Instead source errors are\nconverted to standard types like "),t("code",[e._v("String")]),e._v(". For this reason, both\n"),t("code",[e._v("snafu::ResultExt")]),e._v(" and "),t("code",[e._v("snafu::OptionExt")]),e._v(" cannot be used anymore. An error\nwrapper now looks like "),t("code",[e._v(".map_err(invalid_base64)")]),e._v(" and an "),t("code",[e._v("Option::None")]),e._v(" to\nerror mapping looks like "),t("code",[e._v('.ok_or_else(|| not_found("State"))')]),e._v(".")]),e._v(" "),t("li",[e._v("Backtraces became optional. Use "),t("code",[e._v("RUST_BACKTRACE=1")]),e._v(" to enable them for unit\ntests.")]),e._v(" "),t("li",[t("code",[e._v("Utf8Err")]),e._v("/"),t("code",[e._v("Utf8StringErr")]),e._v(" merged into "),t("code",[e._v("StdError::InvalidUtf8")])]),e._v(" "),t("li",[t("code",[e._v("Base64Err")]),e._v(" renamed into "),t("code",[e._v("StdError::InvalidBase64")])]),e._v(" "),t("li",[t("code",[e._v("ContractErr")]),e._v("/"),t("code",[e._v("DynContractErr")]),e._v(" merged into "),t("code",[e._v("StdError::GenericErr")]),e._v(", thus both\n"),t("code",[e._v("contract_err")]),e._v(" and "),t("code",[e._v("dyn_contract_err")]),e._v(" must be replaced with "),t("code",[e._v("generic_err")]),e._v(".")]),e._v(" "),t("li",[e._v("The unused "),t("code",[e._v("ValidationErr")]),e._v(" was removed")])])])]),e._v(" "),t("p",[e._v("At this point "),t("code",[e._v("cargo wasm")]),e._v(" should pass.")]),e._v(" "),t("h3",{attrs:{id:"update-test-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#update-test-code"}},[e._v("#")]),e._v(" Update test code")]),e._v(" "),t("p",[e._v("Both:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Update all imports from "),t("code",[e._v("cosmwasm::mock::*")]),e._v(" to "),t("code",[e._v("cosmwasm_std::testing::*")])])]),e._v(" "),t("li",[t("p",[e._v("Use "),t("code",[e._v("from_binary")]),e._v(" not "),t("code",[e._v("from_slice")]),e._v(" on all query responses (update imports)")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("from_slice(res.as_slice())")]),e._v(" -> "),t("code",[e._v("from_binary(&res)")])])])]),e._v(" "),t("li",[t("p",[e._v("Replace "),t("code",[e._v('coin("123", "FOO")')]),e._v(" with "),t("code",[e._v('coins(123, "FOO")')]),e._v(". We renamed it to coins\nto be more explicit that it returns "),t("code",[e._v("Vec<Coin>")]),e._v(", and now accept a "),t("code",[e._v("u128")]),e._v(" as\nthe first argument for better type-safety. "),t("code",[e._v("coin")]),e._v(" is now an alias to\n"),t("code",[e._v("Coin::new")]),e._v(" and returns one "),t("code",[e._v("Coin")]),e._v(".")])]),e._v(" "),t("li",[t("p",[e._v("Remove the 4th argument (contract balance) from all calls to "),t("code",[e._v("mock_env")]),e._v(", this\nis no longer stored in the environment.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("dependencies")]),e._v(" was renamed to "),t("code",[e._v("mock_dependencies")]),e._v(". "),t("code",[e._v("mock_dependencies")]),e._v(" and\n"),t("code",[e._v("mock_instance")]),e._v(" take a 2nd argument to set the contract balance (visible for\nthe querier). If you need to set more balances, use "),t("code",[e._v("mock_XX_with_balances")]),e._v(".\nThe follow code block explains:")]),e._v(" "),t("code-block",{staticClass:"codeblock",attrs:{language:"rust",base64:"Ly8gYmVmb3JlOiBiYWxhbmNlIGFzIGxhc3QgYXJnIGluIG1vY2tfZW52CmxldCBtdXQgZGVwcyA9IGRlcGVuZGVuY2llcygyMCk7CmxldCBlbnYgPSBtb2NrX2VudigmYW1wO2RlcHMuYXBpLCAmcXVvdDtjcmVhdG9yJnF1b3Q7LCAmYW1wO2NvaW5zKDE1LCAmcXVvdDtlYXJ0aCZxdW90OyksICZhbXA7Y29pbnMoMTAxNSwgJnF1b3Q7ZWFydGgmcXVvdDspKTsKCi8vIGFmdGVyOiBiYWxhbmNlIGFzIGxhc3QgYXJnIGluIG1vY2tfZGVwZW5kZW5jaWVzCmxldCBtdXQgZGVwcyA9IG1vY2tfZGVwZW5kZW5jaWVzKDIwLCAmYW1wO2NvaW5zKDEwMTUsICZxdW90O2VhcnRoJnF1b3Q7KSk7CmxldCBlbnYgPSBtb2NrX2VudigmYW1wO2RlcHMuYXBpLCAmcXVvdDtjcmVhdG9yJnF1b3Q7LCAmYW1wO2NvaW5zKDE1LCAmcXVvdDtlYXJ0aCZxdW90OykpOwo="}})],1)]),e._v(" "),t("p",[e._v("Unit Tests:")]),e._v(" "),t("ul",[t("li",[e._v("Replace "),t("code",[e._v("dependencies")]),e._v(" with "),t("code",[e._v("mock_dependencies")])])]),e._v(" "),t("p",[e._v("Integration Tests:")]),e._v(" "),t("ul",[t("li",[e._v("We no longer check errors as strings but have rich types:\n"),t("ul",[t("li",[e._v("Before:\n"),t("code",[e._v('match err { ContractResult::Err(msg) => assert_eq!(msg, "Unauthorized"), ... }')])]),e._v(" "),t("li",[e._v("After: "),t("code",[e._v("match err { Err(StdError::Unauthorized{ .. }) => {}, ... }")])])])]),e._v(" "),t("li",[e._v("Remove all imports / use of "),t("code",[e._v("ContractResult")])]),e._v(" "),t("li",[e._v("You must specify "),t("code",[e._v("CosmosMsg::Native")]),e._v(" type when calling\n"),t("code",[e._v("cosmwasm_vm::testing::{handle, init}")]),e._v(". You will want to\n"),t("code",[e._v("use cosmwasm_std::{HandleResult, InitResult}")]),e._v(" or\n"),t("code",[e._v("use cosmwasm_std::{HandleResponse, InitResponse}")]),e._v(". If you don't use custom\nnative types, simply update calls as follows:\n"),t("ul",[t("li",[t("code",[e._v("let res = init(...)")]),e._v(" => "),t("code",[e._v("let res: InitResult = init(...)")])]),e._v(" "),t("li",[t("code",[e._v("let res = init(...).unwrap()")]),e._v(" =>\n"),t("code",[e._v("let res: InitResponse = init(...).unwrap()")])]),e._v(" "),t("li",[t("code",[e._v("let res = handle(...)")]),e._v(" => "),t("code",[e._v("let res: HandleResult = handle(...)")])]),e._v(" "),t("li",[t("code",[e._v("let res = handle(...).unwrap()")]),e._v(" =>\n"),t("code",[e._v("let res: HandleResponse = handle(...).unwrap()")])])])])]),e._v(" "),t("h3",{attrs:{id:"update-schema-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#update-schema-code"}},[e._v("#")]),e._v(" Update schema code")]),e._v(" "),t("p",[e._v("All helper functions have been moved into a new "),t("code",[e._v("cosmwasm-schema")]),e._v(" package.")]),e._v(" "),t("ul",[t("li",[e._v("Add "),t("code",[e._v('cosmwasm-schema = "0.8"')]),e._v(" to "),t("code",[e._v("[dev-dependencies]")]),e._v(" in "),t("code",[e._v("Cargo.toml")])]),e._v(" "),t("li",[e._v("Remove "),t("code",[e._v("serde_json")]),e._v(" "),t("code",[e._v("[dev-dependency]")]),e._v(" if there, as cosmwasm-schema will\nhandle JSON output internally.")]),e._v(" "),t("li",[e._v("Update "),t("code",[e._v("examples/schema.rs")]),e._v(" to look\n"),t("a",{attrs:{href:"https://github.com/CosmWasm/cosmwasm/blob/master/contracts/queue/examples/schema.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("more like queue"),t("OutboundLink")],1),e._v(",\nbut replacing all the imports and type names with those you currently have.")]),e._v(" "),t("li",[e._v("Regenerate schemas with "),t("code",[e._v("cargo schema")])])]),e._v(" "),t("h3",{attrs:{id:"polishing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#polishing"}},[e._v("#")]),e._v(" Polishing")]),e._v(" "),t("p",[e._v("After so many changes, remember to let the linters do their jobs.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cargo fmt")])]),e._v(" "),t("li",[t("code",[e._v("cargo clippy")])])])],1)}),[],!1,null,null,null);o.default=c.exports}}]);