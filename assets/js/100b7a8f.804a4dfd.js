(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4673],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(i,".").concat(d)]||m[d]||l[d]||a;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5317:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return l}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),s=["components"],c={title:"cw20-atomic-swap Spec",sidebar_position:7},i={unversionedId:"cw-plus/cw20/cw20-atomic-swap-spec",id:"version-0.14/cw-plus/cw20/cw20-atomic-swap-spec",isDocsHomePage:!1,title:"Atomic Swaps",description:"cw20-atomic-swap source code//github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-atomic-swap",source:"@site/versioned_docs/version-0.14/cw-plus/cw20/cw20-atomic-swap-spec.md",sourceDirName:"cw-plus/cw20",slug:"/cw-plus/cw20/cw20-atomic-swap-spec",permalink:"/0.14/cw-plus/cw20/cw20-atomic-swap-spec",editUrl:"https://github.com/CosmWasm/docs/edit/main/versioned_docs/version-0.14/cw-plus/cw20/cw20-atomic-swap-spec.md",version:"0.14",sidebarPosition:7,frontMatter:{title:"cw20-atomic-swap Spec",sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"CW20 Staking Derivates",permalink:"/0.14/cw-plus/cw20/cw20-staking-spec"},next:{title:"CW721 Spec: Non Fungible Tokens",permalink:"/0.14/cw-plus/cw721/spec"}},p=[{value:"Token types",id:"token-types",children:[]}],u={toc:p};function l(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"cw20-atomic-swap source code: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-atomic-swap"},"https://github.com/CosmWasm/cosmwasm-plus/tree/master/contracts/cw20-atomic-swap")),(0,a.kt)("p",null,"This is a contract that allows users to execute atomic swaps.\nIt implements one side of an atomic swap. The other side can be realized\nby an equivalent contract in the same blockchain or, typically, on a different blockchain."),(0,a.kt)("p",null,"Each side of an atomic swap has a sender, a recipient, a hash,\nand a timeout. It also has a unique id (for future calls to reference it).\nThe hash is a sha256-encoded 32-bytes long phrase.\nThe timeout can be either time-based (seconds since midnight, January 1, 1970),\nor block height based."),(0,a.kt)("p",null,"The basic function is, the sender chooses a 32-bytes long phrase as preimage, hashes it,\nand then uses the hash to create a swap with funds.\nBefore the timeout, anybody that knows the preimage may decide to release the funds\nto the original recipient.\nAfter the timeout (and if no release has been executed), anyone can refund\nthe locked tokens to the original sender.\nOn the other side of the swap the process is similar, with sender and recipient exchanged.\nThe hash must be the same, so the first sender can claim the funds, revealing the preimage\nand triggering the swap."),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/iov-one/iov-core/blob/master/docs/atomic-swap-protocol-v1.md"},"IOV atomic swap spec"),"\nfor details."),(0,a.kt)("h2",{id:"token-types"},"Token types"),(0,a.kt)("p",null,"Currently native tokens are supported; an upcoming version will support cw20 tokens."))}l.isMDXComponent=!0}}]);