(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{638:function(t,e,o){"use strict";o.r(e);var s=o(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"your-first-contract"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#your-first-contract"}},[t._v("#")]),t._v(" Your First Contract")]),t._v(" "),o("p",[t._v("Buckle up, we will now get first-hand experience with CosmWasm,\nby starting up our own CosmWasm-enabled blockchain (just one node for now), modifying\nan existing contract, deploying it to our system, and executing it via the cli.")]),t._v(" "),o("p",[t._v("To make things a bit more interesting, we will demonstrate modifying the example\nescrow contract and adding a backdoor to it. It exposes an identical API to the\noriginal one, but has one hidden command added. This also shows the importance of\nverifying the source code behind any contract you run.")]),t._v(" "),o("p",[t._v("This is designed for programmers who are comfortable with the command-line and using\nLinux or MacOS. It is helpful to have a basic understanding\nof Rust and Go, but we will lead you through, so fast learners need no prior knowledge.\nThe "),o("a",{attrs:{href:"../name-service/intro"}},[t._v("next tutorial, name service")]),t._v(" will assume knowledge of these basics.\nIf you know Rust and have worked on a Cosmos SDK app before, you can skip right to name service.\nFor others, best to go through this one first.")]),t._v(" "),o("h2",{attrs:{id:"sections"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#sections"}},[t._v("#")]),t._v(" Sections")]),t._v(" "),o("p",[o("a",{attrs:{href:"./smart-contracts"}},[t._v("Smart Contracts")]),t._v(" to read about design of the smart contract engine provided by CosmWasm. You will understand the architecture and how to design your contracts, as well as the security design of the system.")]),t._v(" "),o("p",[o("a",{attrs:{href:"./using-the-sdk"}},[t._v("Using the SDK")]),t._v(" for those who have no prior experience with the Cosmos SDK will get you up and running with the basics of using a Cosmos SDK based blockchain. By the end, You will be able to compile a chain from source and launch a local devnet.")]),t._v(" "),o("p",[o("a",{attrs:{href:"./rust-basics"}},[t._v("Rust Basics")]),t._v(" is for those with little to no prior experience with Rust. It is no crash-course in the language, but enough to get you compiling (and editing) the example contracts and pointers on where to dig deeper into the language.")]),t._v(" "),o("p",[o("a",{attrs:{href:"./editing-escrow-contract"}},[t._v("Editing a Contract")]),t._v(" will apply your (newly acquired) Rust skills to make some changes to a sample contract.")]),t._v(" "),o("p",[o("a",{attrs:{href:"./first-demo"}},[t._v("Deploying to Testnet")]),t._v(" is a simple demo that builds on the above sections and walks you through, step by step, taking your custom contract, deploying it to a testnet, and executing it. This will show you not just the internals of the contract, but how to use it from the outside.")]),t._v(" "),o("h2",{attrs:{id:"video-version"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#video-version"}},[t._v("#")]),t._v(" Video Version")]),t._v(" "),o("p",[t._v("The coding sections for smart contracts are also available as a "),o("a",{attrs:{href:"https://vimeo.com/showcase/6671477",target:"_blank",rel:"noopener noreferrer"}},[t._v("series of videos, leading you through the code structure"),o("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);