(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{645:function(t,e,n){"use strict";n.r(e);var o=n(0),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"your-first-contract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#your-first-contract"}},[t._v("#")]),t._v(" Your First Contract")]),t._v(" "),n("p",[t._v("Buckle up, we will now get first-hand experience with CosmWasm, by starting up our own\nCosmWasm-enabled blockchain (just one node for now), modifying an existing contract, deploying it to\nour system, and executing it via the cli. If you are more "),n("em",[t._v("research first then get your hands dirty\nsecond")]),t._v(" person, you should go ahead to "),n("RouterLink",{attrs:{to:"/architecture/multichain.html"}},[t._v("Architecture")]),t._v(" read it first\nand then head back here.")],1),t._v(" "),n("p",[t._v("We will not dive into smart contract development in this section to provide an easy to digest\nintroduction. Also, you can follow the steps here to test out smart contracts live on a testnet\nwithout drowning in smart contract development details. We will demonstrate setting up environment,\ncompiling, deploying, and interacting. Then to make things a bit more interesting, we will\ndemonstrate modifying the example escrow contract by adding a backdoor to it in the "),n("RouterLink",{attrs:{to:"/learn/hijack-escrow/intro.html"}},[t._v("Hijack Escrow\ntutorial")]),t._v(". It exposes an identical API to the original one, but has\none hidden command added. This also shows the importance of verifying the source code behind any\ncontract you run.")],1),t._v(" "),n("p",[t._v("This is designed for programmers who are comfortable with the command-line and using Linux or MacOS.\nIt is helpful to have a basic understanding of Rust and Go, but we will lead you through, so fast\nlearners need no prior knowledge. The "),n("a",{attrs:{href:"../learn/name-service/intro"}},[t._v("next tutorial, name service")]),t._v("\nwill assume knowledge of these basics. And it will show all the development flow from 0 to\nproduction.")]),t._v(" "),n("h2",{attrs:{id:"sections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sections"}},[t._v("#")]),t._v(" Sections")]),t._v(" "),n("p",[n("a",{attrs:{href:"./installation"}},[t._v("Installation")]),t._v(" will show you how to setup the required software tooling for\nCosmWasm.")]),t._v(" "),n("p",[n("a",{attrs:{href:"./setting-env"}},[t._v("Setting up Environment")]),t._v(" will show you how to setup the client environment,\ninteracting with faucet.")]),t._v(" "),n("p",[n("a",{attrs:{href:"./compile-contract"}},[t._v("Downloading and Compiling Contract")]),t._v(" will demonstrate downloading and compiling\nsmart contract code to wasm byte code.")]),t._v(" "),n("p",[n("a",{attrs:{href:"./interact-with-contract"}},[t._v("Interacting with Contracts")]),t._v(" will show deploying, initializing and\nexecuting smart contracts.")]),t._v(" "),n("p",[n("RouterLink",{attrs:{to:"/getting-started/next-steps.html"}},[t._v("Next Steps")]),t._v(" is the last part of the tutorial that wraps up and sails you to the\nnext dock, meaning new learning resources.")],1),t._v(" "),n("h2",{attrs:{id:"video-version"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#video-version"}},[t._v("#")]),t._v(" Video Version")]),t._v(" "),n("p",[t._v("The coding sections for smart contracts are also available as a "),n("a",{attrs:{href:"https://vimeo.com/showcase/6671477",target:"_blank",rel:"noopener noreferrer"}},[t._v("series of videos, leading you\nthrough the code structure"),n("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=a.exports}}]);