(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3477],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return k}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),k=i,m=p["".concat(d,".").concat(k)]||p[k]||c[k]||a;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7327:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o=["components"],s={sidebar_position:2},d="Indexes",l={unversionedId:"storage/indexes",id:"storage/indexes",isDocsHomePage:!1,title:"Indexes",description:"Indexes are key structures that enables iteration over primary keys using value information.",source:"@site/tutorials/storage/indexes.md",sourceDirName:"storage",slug:"/storage/indexes",permalink:"/tutorials/storage/indexes",editUrl:"https://github.com/CosmWasm/docs/edit/main/tutorials/storage/indexes.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorials",previous:{title:"How CW Key Value Storage Works?",permalink:"/tutorials/storage/key-value-store"},next:{title:"Advanced State Modeling",permalink:"/tutorials/storage/state-modeling"}},u=[{value:"Plus-storage Indexing",id:"plus-storage-indexing",children:[{value:"Composite Indexes",id:"composite-indexes",children:[]},{value:"Unique Indexes",id:"unique-indexes",children:[]}]}],c={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"indexes"},"Indexes"),(0,a.kt)("p",null,"Indexes are key structures that enables iteration over primary keys using value information.\nHere is an example for understanding it."),(0,a.kt)("p",null,"Let's assume a model: there are multiple tokens in the system, each token has unique admin.\nAn admin must be related to a token. Tokens must be queryable by admin."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct Token {\n  pub admin: Addr,\n  pub ticker: String\n}\n")),(0,a.kt)("p",null,"Tokens can be identified an auto incremented key, and this integer will be used as primary key.\nLet's use ticker as key, this will make each token unique."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"(TokenPK) -> Token")),(0,a.kt)("p",null,"Here is the fun part, admin index:\n",(0,a.kt)("inlineCode",{parentName:"p"},"(admin, TokenPK) -> TokenPK")),(0,a.kt)("p",null,"TokenPK points to a Token data, and ",(0,a.kt)("inlineCode",{parentName:"p"},"admin:TokenPK")," key points to ",(0,a.kt)("inlineCode",{parentName:"p"},"TokenPK"),". With two database hits, Token data is\naccessible.\nNow to retrieve all the tokens an admin manages, we run prefix range like we have shown above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub const TOKENS: Map<U8Key, Token> = Map::new("tokens");\n// (Admin Address, Token PK) -> u8 key\npub const ADMIN_INDEX: Map<(&Addr, U8Key), &[u8]> = Map::new("admin_tokenpk");\n')),(0,a.kt)("p",null,"Now tokens are easily accessible by ",(0,a.kt)("strong",{parentName:"p"},"admin")," information. On every state change to ",(0,a.kt)("inlineCode",{parentName:"p"},"TOKENS"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"ADMIN")," must be modified accordingly."),(0,a.kt)("h2",{id:"plus-storage-indexing"},"Plus-storage Indexing"),(0,a.kt)("p",null,"Solution above would work but not beautiful...\nThis is where ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm-plus/blob/main/packages/storage-plus/src/indexed_map.rs"},"plus-storage/IndexedMap"),"\ncomes in to the play. ",(0,a.kt)("inlineCode",{parentName:"p"},"IndexedMap")," is a storage handler that indexes internally. Code below contains indexing code,\nalso some boilerplate."),(0,a.kt)("h3",{id:"composite-indexes"},"Composite Indexes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct TokenIndexes<'a> {\n  // secondary indexed by admin address\n  // last U64Key is the primary key which is auto incremented token counter\n  pub admin: MultiIndex<'a, (Vec<u8>, Vec<u8>), Token>,\n}\n\n// this may become macro, not important just boilerplate, builds the list of indexes for later use\nimpl<'a> IndexList<Token> for TokenIndexes<'a> {\n  fn get_indexes(&'_ self) -> Box<dyn Iterator<Item = &'_ dyn Index<Token>> + '_> {\n    let v: Vec<&dyn Index<Token>> = vec![&self.admin];\n    Box::new(v.into_iter())\n  }\n}\n\nconst TOKEN_NAMESPACE: &str = \"tokens\";\n\npub fn tokens<'a>() -> IndexedMap<'a, &'a [u8], Token, TokenIndexes<'a>> {\n  let indexes = TokenIndexes {\n    admin: MultiIndex::new(\n      |d, k| (index_string(d.admin.as_str()), k),\n      TOKEN_NAMESPACE,\n      \"tokens__admin\",\n    )\n  };\n  IndexedMap::new(TOKEN_NAMESPACE, indexes)\n}\n")),(0,a.kt)("p",null,"Now ",(0,a.kt)("inlineCode",{parentName:"p"},"tokens")," will index admin internally. On ",(0,a.kt)("inlineCode",{parentName:"p"},"token.admin")," updates index will be updated too."),(0,a.kt)("p",null,"Here is a code example on using indexes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn test_tokens() {\n  let mut store = MockStorage::new();\n\n  let admin1 = Addr::unchecked("addr1");\n  let ticker1 = "TOKEN1".to_string();\n  let token1 = Token {\n    admin: admin1.clone(),\n    ticker: ticker1,\n  };\n\n  let ticker2 = "TOKEN2".to_string();\n  let token2 = Token {\n    admin: admin1.clone(),\n    ticker: ticker2,\n  };\n\n  let token_id = increment_tokens(store.borrow_mut()).unwrap();\n  tokens().save(store.borrow_mut(), &U64Key::from(token_id).joined_key(), &token1).unwrap();\n\n  let token_id = increment_tokens(store.borrow_mut()).unwrap();\n  tokens().save(store.borrow_mut(), &U64Key::from(token_id).joined_key(), &token1).unwrap();\n\n  // want to load token using admin1 and ticker1\n  let list: Vec<_> = tokens()\n    .idx.admin\n    .prefix(index_string(admin1.as_str()))\n    .range(&store, None, None, Order::Ascending)\n    .collect::<StdResult<_>>().unwrap();\n  let (_, t) = &list[0];\n  assert_eq!(t, &token1);\n  assert_eq!(2, list.len());\n}\n')),(0,a.kt)("h3",{id:"unique-indexes"},"Unique Indexes"),(0,a.kt)("p",null,"Above example covers the case which one admin can own multiple tokens.\nWhat if we want to ensure data is unique for a value? This is a common case.\nFor that, there is ",(0,a.kt)("inlineCode",{parentName:"p"},"UniqueIndex")),(0,a.kt)("p",null,"Here is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\npub struct Token {\n    pub admin: Addr,\n    pub ticker: String,\n    pub identifier: u8, // <---- unique value\n}\n\npub struct TokenIndexes<'a> {\n  // secondary indexed by admin address\n  // last U64Key is the primary key which is auto incremented token counter\n  pub admin: MultiIndex<'a, (Vec<u8>, Vec<u8>), Token>,\n  // token.identifier\n  pub identifier: UniqueIndex<'a, U8Key, Token>,\n}\n\n// this may become macro, not important just boilerplate, builds the list of indexes for later use\nimpl<'a> IndexList<Token> for TokenIndexes<'a> {\n  fn get_indexes(&'_ self) -> Box<dyn Iterator<Item = &'_ dyn Index<Token>> + '_> {\n    let v: Vec<&dyn Index<Token>> = vec![&self.admin, &self.identifier];\n    Box::new(v.into_iter())\n  }\n}\n\npub fn tokens<'a>() -> IndexedMap<'a, &'a [u8], Token, TokenIndexes<'a>> {\n  let indexes = TokenIndexes {\n    admin: MultiIndex::new(\n      |d, k| (index_string(d.admin.as_str()), k),\n      TOKEN_NAMESPACE,\n      \"tokens__admin\",\n    ),\n    identifier: UniqueIndex::new(|d| U8Key::new(d.identifier), \"token_identifier\"),\n  };\n  IndexedMap::new(TOKEN_NAMESPACE, indexes)\n}\n")),(0,a.kt)("p",null,"Now ",(0,a.kt)("inlineCode",{parentName:"p"},"tokens")," are secondary indexed with two values: ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," and a unique ",(0,a.kt)("inlineCode",{parentName:"p"},"identifier"),"\nHere is a test code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn test_tokens() {\n  let mut store = MockStorage::new();\n\n  let admin1 = Addr::unchecked("addr1");\n  let ticker1 = "TOKEN1".to_string();\n  let token1 = Token {\n    admin: admin1.clone(),\n    ticker: ticker1,\n    identifier: 0,\n  };\n\n  let token_id = increment_tokens(store.borrow_mut()).unwrap();\n  tokens().save(store.borrow_mut(), &U64Key::from(token_id).joined_key(), &token1).unwrap();\n\n  let ticker2 = "TOKEN2".to_string();\n  let token2 = Token {\n    admin: admin1.clone(),\n    ticker: ticker2,\n    identifier: 0,\n  };\n\n  let token_id = increment_tokens(store.borrow_mut()).unwrap();\n  tokens().save(store.borrow_mut(), &U64Key::from(token_id).joined_key(), &token1).unwrap();\n}\n')),(0,a.kt)("p",null,"Last line will crash with error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"called `Result::unwrap()` on an `Err` value: GenericErr { msg: \"Violates unique constraint on index\" }\nthread 'state::test::test_tokens' panicked at 'called `Result::unwrap()` on an `Err` value: GenericErr { msg: \"Violates unique constraint on index\" }', src/state.rs:197:90\nstack backtrace:\n")))}p.isMDXComponent=!0}}]);